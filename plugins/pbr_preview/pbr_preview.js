"use strict";(()=>{var b=THREE,J=Vue,Le=Blockbench;var B="_NONE_",d={albedo:{id:"albedo",label:"Albedo",description:"The color of the material",map:"map",icon:"tonality",default:new b.Color(16777215)},metalness:{id:"metalness",label:"Metalness",description:"The material's metalness map",map:"metalnessMap",icon:"brightness_6",default:new b.Color(0)},emissive:{id:"emissive",label:"Emissive",description:"The material's emissive map",map:"emissiveMap",icon:"wb_twilight",default:new b.Color(0)},roughness:{id:"roughness",label:"Roughness",description:"The material's roughness map",map:"roughnessMap",icon:"grain",default:new b.Color(16777215)},height:{id:"height",label:"Height",description:"The material's height map",map:"bumpMap",icon:"landscape",default:new b.Color(16777215)},normal:{id:"normal",label:"Normal",description:"The material's normal map",map:"normalMap",icon:"looks",default:new b.Color("rgb(128, 128, 255)")},ao:{id:"ao",label:"Ambient Occlusion",description:"The material's ambient occlusion map",map:"aoMap",icon:"motion_mode",default:new b.Color(16777215)}},s={},w=[],E=[];w.push(()=>{s.channelProp=new Property(TextureLayer,"enum","channel",{default:B,values:Object.keys(d).map(e=>d[e].id),label:"PBR Channel",exposed:!1}),s.textureChannelProp=new Property(Texture,"enum","channel",{default:B,values:Object.keys(d).map(e=>d[e].id),label:"PBR Channel",exposed:!1}),s.pbrMaterialsProp=new Property(ModelProject,"object","pbr_materials",{default:{},exposed:!1,label:"PBR Materials"}),s.projectMaterialsProp=new Property(ModelProject,"object","bb_materials",{default:{},exposed:!1,label:"Project Materials"}),s.projectPbrModeProp=new Property(ModelProject,"boolean","pbr_active",{default:!1,exposed:!0,values:[],label:"PBR Mode"})});var ve=(e=!0)=>{let a=Project?Project.textures??Texture.all:Texture.all;return e?a.filter(t=>t.layers_enabled&&t.layers.length>0).flatMap(t=>t.layers):a},L=class e{constructor(a,t){this._scope=a??ve(),this._materialUuid=t}merToCanvas(){let a=this.getTexture(d.emissive),t=this.getTexture(d.roughness),r=this.getTexture(d.metalness);if(!a&&!t&&!r){let{metalness:n,emissive:o,roughness:l}=this.decodeMer();n&&(r=e.makePixelatedCanvas(n)),o&&(a=e.makePixelatedCanvas(o)),l&&(t=e.makePixelatedCanvas(l))}return{emissiveMap:a,roughnessMap:t,metalnessMap:r}}getMaterial(a={}){let{emissiveMap:t,roughnessMap:r,metalnessMap:n}=this.merToCanvas(),o=this.getTexture(d.normal);return new b.MeshStandardMaterial({map:this.getTexture(d.albedo)??e.makePixelatedCanvas(TextureLayer.selected?.canvas??Texture.all.find(l=>l.selected)?.canvas??Texture.getDefault().canvas),aoMap:this.getTexture(d.ao),bumpMap:this.getTexture(d.height),normalMap:o,normalScale:new b.Vector2(1,1),metalnessMap:n,metalness:n?1:0,roughnessMap:r,roughness:1,emissiveMap:t,emissiveIntensity:t?1:0,emissive:t?16777215:0,envMap:PreviewScene.active?.cubemap??null,envMapIntensity:.95,alphaTest:.1,transparent:!0,...a})}saveTexture(a,t){Project&&(Project.pbr_materials||(Project.pbr_materials={}),Project.pbr_materials[this._materialUuid]||(Project.pbr_materials[this._materialUuid]={}),Project.pbr_materials[this._materialUuid][a.id]=t.uuid,t.extend({channel:a.id}))}findTexture(a,t=!0){if(!Project)return null;let r=this._scope.find(i=>i.channel&&(i.channel===a||i.channel===a.id));if(r)return r;let n=typeof a=="string"?a:a.id;Project.pbr_materials??={};let o=Project.pbr_materials[this._materialUuid];if(!o&&t&&n!==B){let i=new RegExp(`_*${n}(.[^.]+)?$`,"i");return this._scope.find(h=>i.test(h.name))??null}let l=o?.[n];return l?this._scope.find(i=>i.uuid===l)??null:null}static makePixelatedCanvas(a){let t=new b.CanvasTexture(a,void 0,void 0,void 0,b.NearestFilter,b.NearestFilter);return t.needsUpdate=!0,t}getTexture(a){let t=this.findTexture(a);return t?e.makePixelatedCanvas(t.canvas):null}static extractChannel(a,t){let r=a.canvas,n=r.width,o=r.height,l=r.getContext("2d");if(!l||!n||!o)return null;let i=document.createElement("canvas");i.width=n,i.height=o;let h=i.getContext("2d");if(!h)return null;let p={r:0,g:1,b:2,a:3}[t],{data:f}=l.getImageData(0,0,n,o),u=new Uint8ClampedArray(n*o*4);for(let x=0;x<f.length;x+=4)u[x]=f[x+p],u[x+1]=f[x+p],u[x+2]=f[x+p],u[x+3]=255;let _=new ImageData(u,n,o);return h.putImageData(_,0,0),i}decodeMer(a=1){let t=this.findTexture("mer",!0);if(!t)return{metalness:null,emissive:null,emissiveLevel:null,roughness:null,sss:null};let r=e.extractChannel(t,"r"),n=e.extractChannel(t,"g"),o=e.extractChannel(t,"b"),l=e.extractChannel(t,"a"),i=document.createElement("canvas");i.width=t.img.width??16,i.height=t.img.height??16;let h=this.findTexture(d.albedo);h&&(i.width=h.img.width??16,i.height=h.img.height??16);let p=i.getContext("2d"),f=n?.getContext("2d"),u=h?.canvas?.getContext("2d");if(!p||!u||!f)return{metalness:r,emissive:n,roughness:o,sss:l};let _=u.getImageData(0,0,i.width,i.height),x=f.getImageData(0,0,i.width,i.height),v=new Uint8ClampedArray(i.width*i.height*4);for(let m=0;m<_.data.length;m+=4){if(x.data[m]>a){v[m]=_.data[m],v[m+1]=_.data[m+1],v[m+2]=_.data[m+2],v[m+3]=255;continue}v[m]=0,v[m+1]=0,v[m+2]=0,v[m+3]=255}return p.putImageData(new ImageData(v,i.width,i.height),0,0),{metalness:r,emissive:i,emissiveLevel:n,roughness:o,sss:l}}createMer(a=!1){let t=this.findTexture(d.metalness,a),r=this.findTexture(d.emissive,a),n=this.findTexture(d.roughness,a),o=this.findTexture("sss",!1),l=Math.max(t?.img.width??0,r?.img.width??0,n?.img.width??0,Project?Project.texture_width:0,16),i=Math.max(t?.img.height??0,r?.img.height??0,n?.img.height??0,Project?Project.texture_height:0,16),h=document.createElement("canvas");h.width=l,h.height=i;let p=h.getContext("2d");if(!p)return null;let f=t?.img?e.extractChannel(t,"r"):null,u=r?.img?e.extractChannel(r,"g"):null,_=n?.img?e.extractChannel(n,"b"):null,x=o&&o?.img?e.extractChannel(o,"a"):null,v=f?.getContext("2d")?.getImageData(0,0,l,i)??new ImageData(l,i),m=u?.getContext("2d")?.getImageData(0,0,l,i)??new ImageData(l,i),c=_?.getContext("2d")?.getImageData(0,0,l,i)??new ImageData(l,i),g=x?.getContext("2d")?.getImageData(0,0,l,i)??new ImageData(new Uint8ClampedArray(l*i*4).fill(255),l,i),y=new Uint8ClampedArray(l*i*4);for(let C=0;C<y.length;C+=4)y[C]=v.data[C],y[C+1]=m.data[C],y[C+2]=c.data[C],y[C+3]=g.data[C];return p.putImageData(new ImageData(y,l,i),0,0),h}createLabPbrOutput(a=!0){let t=this.findTexture(d.metalness,a),r=this.findTexture(d.emissive,a),n=this.findTexture(d.roughness,a),o=this.findTexture(d.normal,a),l=this.findTexture(d.height,a),i=this.findTexture(d.ao,!1),h=this.findTexture("sss",!0),p=this.findTexture("porosity",!0),f=Math.max(t?.img.width??0,r?.img.width??0,n?.img.width??0,Project?Project.texture_width:0,16),u=Math.max(t?.img.height??0,r?.img.height??0,n?.img.height??0,Project?Project.texture_height:0,16),_=document.createElement("canvas");_.width=f,_.height=u;let x=_.getContext("2d"),v=document.createElement("canvas");v.width=f,v.height=u;let m=v.getContext("2d");if(!x||!m)return null;let c=new Uint8ClampedArray(f*u*4),g=new Uint8ClampedArray(f*u*4),y=t?.canvas,C=r?.canvas,k=n?.canvas,M=h?.canvas,D=p?.canvas,T=y?.getContext("2d"),j=C?.getContext("2d"),N=k?.getContext("2d"),ae=M?.getContext("2d"),re=D?.getContext("2d"),ne=T?.getImageData(0,0,f,u),A=j?.getImageData(0,0,f,u),Q=N?.getImageData(0,0,f,u),se=ae?.getImageData(0,0,f,u),oe=re?.getImageData(0,0,f,u);for(let P=0;P<c.length;P+=4){let V=Q?1-Math.sqrt(Q.data[P]/255):0,ge=Math.min(229,Math.max(0,Math.round((ne?.data[P]??V)*229))),fe=oe?.data[P],xe=se?.data[P];if(c[P]=V*255,c[P+1]=ge,c[P+2]=xe??fe??0,!A){c[P+3]=255;continue}let be=Math.round((A?.data[P]+A?.data[P+1]+A?.data[P+2])/3);c[P+3]=be||255}x.putImageData(new ImageData(c,f,u),0,0);let ie=o?.canvas,le=i?.canvas,ce=l?.canvas,ue=ie?.getContext("2d"),me=le?.getContext("2d"),de=ce?.getContext("2d"),z=ue?.getImageData(0,0,f,u),he=me?.getImageData(0,0,f,u),pe=de?.getImageData(0,0,f,u);for(let P=0;P<g.length;P+=4)g[P]=z?.data[P]??0,g[P+1]=z?.data[P+1]??0,g[P+2]=he?.data[P+2]??255,g[P+3]=pe?.data[P+3]||255;return m.putImageData(new ImageData(g,f,u),0,0),{specular:_,normalMap:v}}decodeLabPbrNormal(a){let t=a.img.width??16,r=a.img.height??16,n=a.canvas.getContext("2d");if(!n)return{};let o=document.createElement("canvas");o.width=t,o.height=r;let l=document.createElement("canvas");l.width=t,l.height=r;let i=document.createElement("canvas");i.width=t,i.height=r;let h=o.getContext("2d"),p=l.getContext("2d"),f=i.getContext("2d"),{data:u}=n.getImageData(0,0,t,r);if(!u||!h||!p||!f)return{};let _=new Uint8ClampedArray(t*r*4),x=new Uint8ClampedArray(t*r*4),v=new Uint8ClampedArray(t*r*4);for(let m=0;m<u.length;m+=4){let c=m+1,g=m+2,y=m+3;_[m]=u[g],_[c]=u[g],_[g]=u[g],_[y]=255,x[m]=u[m],x[c]=u[c],x[g]=255,x[y]=255,v[m]=u[y],v[c]=u[y],v[g]=u[y],v[y]=255}return h.putImageData(new ImageData(_,t,r),0,0),p.putImageData(new ImageData(x,t,r),0,0),f.putImageData(new ImageData(v,t,r),0,0),{ao:o,normal:l,heightmap:i}}decodeLabPbrSpecular(a){let t=a.img.width??16,r=a.img.height??16,n=a.canvas.getContext("2d");if(!n)return{};let o=document.createElement("canvas");o.width=t,o.height=r;let l=document.createElement("canvas");l.width=t,l.height=r;let i=document.createElement("canvas");i.width=t,i.height=r;let h=document.createElement("canvas");h.width=t,h.height=r;let p=document.createElement("canvas");p.width=t,p.height=r;let f=o.getContext("2d"),u=l.getContext("2d"),_=i.getContext("2d"),x=h.getContext("2d"),v=p.getContext("2d"),{data:m}=n.getImageData(0,0,t,r);if(!m||!f||!u||!_||!x||!v)return{};let c=new Uint8ClampedArray(t*r*4),g=new Uint8ClampedArray(t*r*4),y=new Uint8ClampedArray(t*r*4),C=new Uint8ClampedArray(t*r*4),k=new Uint8ClampedArray(t*r*4);for(let M=0;M<m.length;M+=4){let D=M+1,T=M+2,j=M+3;y[M]=255-m[M],y[D]=255-m[M],y[T]=255-m[M],y[j]=255,c[M]=m[D],c[D]=m[D],c[T]=m[D],c[j]=255,g[M]=m[j],g[D]=m[j],g[T]=m[j],g[j]=255,C[M]=0,C[D]=0,C[T]=0,C[j]=255,k[M]=m[T],k[D]=m[T],k[T]=m[T],k[j]=255,m[T]<65&&(C[M]=m[T],C[D]=m[T],C[T]=m[T],C[j]=255,k[M]=0,k[D]=0,k[T]=0,k[j]=255)}return f.putImageData(new ImageData(c,t,r),0,0),u.putImageData(new ImageData(g,t,r),0,0),_.putImageData(new ImageData(y,t,r),0,0),x.putImageData(new ImageData(C,t,r),0,0),v.putImageData(new ImageData(k,t,r),0,0),{metalness:o,emissive:l,roughness:i,sss:h,porosity:p}}createTexturesFromSpecular(a){let t=this.decodeLabPbrSpecular(a);return Object.entries(t).forEach(([r,n])=>{n&&new Texture({name:`${a.name}_${r}`,saved:!1,particle:!1,keep_size:!1}).fromDataURL(n.toDataURL()).add()}),t}createTexturesFromNormal(a){let t=this.decodeLabPbrNormal(a);return Object.entries(t).forEach(([r,n])=>{n&&new Texture({name:`${a.name}_${r}`,saved:!1,particle:!1,keep_size:!1}).fromDataURL(n.toDataURL()).add()}),t}createNormalMap(a,t=!1){let r=a.canvas.getContext("2d");if(!r)return null;let n=Math.max(a.img.width??a.canvas.width,Project?Project.texture_width:0,16),o=Math.max(a.img.height??a.canvas.height,Project?Project.texture_height:0,16),{data:l}=r.getImageData(0,0,n,o),i=document.createElement("canvas"),h=i.getContext("2d");if(!h)return null;let p=(c,g)=>{let y=(c+g*n)*4;return l[y]/255};i.width=n,i.height=o,h.drawImage(a.img,0,0,n,o);let f=h.getImageData(0,0,n,o),u=f.data,_=c=>{let g=Math.sqrt(c[0]*c[0]+c[1]*c[1]+c[2]*c[2]);return[c[0]/g,c[1]/g,c[2]/g]};for(let c=0;c<o;c++)for(let g=0;g<n;g++){let y=p(Math.max(g-1,0),c),C=p(Math.min(g+1,n-1),c),k=p(g,Math.max(c-1,0)),M=p(g,Math.min(c+1,o-1)),D=C-y,T=M-k,j=_([-D,-T,1]),N=(c*n+g)*4;u[N]=(j[0]+1)/2*255,u[N+1]=(j[1]+1)/2*255,u[N+2]=(j[2]+1)/2*255,u[N+3]=t?p(g,c)*255:255}h.putImageData(f,0,0);let x=i.toDataURL(),v=`${a.name.replace(/_height(map)?/i,"")}_normal`;if(a instanceof TextureLayer){let c=new TextureLayer({name:v,data_url:x,visible:!0},a.texture);return c.addForEditing(),c}let m=new Texture({name:v,saved:!1,particle:!1,keep_size:!1}).fromDataURL(x);return Project&&m.add(),m}};var I=class{constructor({lightHeight:a=.66,ambientLight:t=[.1,.1,.1],minLightIntensity:r=0,lightDiffuse:n=[1,1,1]}={}){this.lightHeight=a,this.ambientLight=t,this.minLightIntensity=r,this.lightDiffuse=n}bake(a,t,r){let n=t instanceof HTMLCanvasElement?t:this.createCanvas(t.width,t.height),o=r instanceof HTMLCanvasElement?r:this.createCanvas(r.width,r.height),l=n.getContext("2d"),i=o.getContext("2d");l.drawImage(t,0,0),i.drawImage(r,0,0);let h=l.getImageData(0,0,t.width,t.height),p=i.getImageData(0,0,r.width,r.height),f=[],u=[];for(let x=0;x<p.width;++x){u[x]=[];for(let v=0;v<p.height;++v){let m=(x+v*p.width)*4,c=[(p.data[m+0]/255-.5)*2,(p.data[m+1]/255-.5)*2,(p.data[m+2]/255-.5)*2],g=Math.sqrt(c[0]**2+c[1]**2+c[2]**2);u[x][v]=[c[0]/g,c[1]/g,c[2]/g]}}let _=x=>{let v=this.createCanvas(t.width,t.height),m=v.getContext("2d"),c=m.getImageData(0,0,v.width,v.height),g=[Math.cos(x),Math.sin(x),this.lightHeight];for(let y=0;y<p.width;++y)for(let C=0;C<p.height;++C){let k=u[y][C],M=(y+C*p.width)*4,D=[h.data[M+0]/255,h.data[M+1]/255,h.data[M+2]/255,h.data[M+3]],T=k[0]*g[0]+k[1]*g[1]+k[2]*g[2];T=Math.min(1,Math.max(this.minLightIntensity,T));let j=[T*D[0]*this.lightDiffuse[0]+this.ambientLight[0],T*D[1]*this.lightDiffuse[1]+this.ambientLight[1],T*D[2]*this.lightDiffuse[2]+this.ambientLight[2],D[3]];c.data[M+0]=Math.floor(j[0]*255),c.data[M+1]=Math.floor(j[1]*255),c.data[M+2]=Math.floor(j[2]*255),c.data[M+3]=j[3]}return m.putImageData(c,0,0),v};for(let x=0;x<a;++x){let v=Math.PI*2/a*x;f.push(_(v))}return f}createCanvas(a,t){let r=document.createElement("canvas");return r.width=a,r.height=t,r}};var W=(e,a=8,t=!1)=>{if(!Project)return;let r=Project.selected_texture??Texture.getDefault(),n=new L(r.layers_enabled?r.layers:Project.textures,r.uuid),o=n.findTexture(d.albedo);if(!o){Blockbench.showStatusMessage("Can not bake without a base color assigned.",3e3);return}let l=n.findTexture(d.normal);if(!l){Blockbench.showStatusMessage("Can not bake without a normal map assigned.",3e3);return}let h=new I(e).bake(a,o.canvas,l.canvas),p=new Texture({name:`${o.name}_baked`,saved:!1,particle:!1,keep_size:!1,layers_enabled:!0}).fromDataURL(h[0].toDataURL()),f=t?u=>{let _=n.findTexture(d.emissive);if(!_)return u;let x=_.canvas;if(!x.getContext("2d"))return u;let m=Math.max(u.width,x.width,Project?Project.texture_width:16),c=Math.max(u.height,x.height,Project?Project.texture_height:16),g=document.createElement("canvas");g.width=m,g.height=c;let y=g.getContext("2d");return y?(y.drawImage(u,0,0),y.globalCompositeOperation="screen",y.drawImage(x,0,0),g):u}:u=>u;h.forEach((u,_)=>{new TextureLayer({name:`baked_${_+1}`,data_url:f(u).toDataURL()},p).addForEditing()}),p.add().select(),Blockbench.showQuickMessage("Textures baked \u{1F950}",2e3)};w.push(()=>{s.bakeTexturesDialog=new Dialog("bake_textures",{id:"bake_textures",title:"Bake Textures",buttons:["Bake","Cancel"],form:{ambientLight:{type:"color",label:"Ambient Light",value:"#1f1f1f"},lightDiffuse:{type:"color",label:"Light Diffuse",value:"#ffffff"},lightHeight:{type:"range",label:"Light Height",min:0,max:1,step:.01,value:.66},minLightIntensity:{type:"range",label:"Minimum Light Intensity",min:0,max:1,step:.01,value:0},directions:{type:"number",label:"Directions",value:8,min:1,max:360,step:1},blendEmissive:{type:"checkbox",label:"Blend Emissive",value:!1}},onConfirm(e){let a=new b.Color(e.ambientLight.toString()),t=new b.Color(e.lightDiffuse.toString());W({ambientLight:[a.r,a.g,a.b],lightDiffuse:[t.r,t.g,t.b],lightHeight:Number(e.lightHeight),minLightIntensity:Number(e.minLightIntensity)},e.directions??8,e.blendEmissive??!1)}}),s.bakeTexturesAction=new Action("bake_textures",{icon:"cake",name:"Bake Textures",description:"Bakes textures for the selected PBR material",click(){s.bakeTexturesDialog?.show()}}),MenuBar.addAction(s.bakeTexturesAction,"tools")});E.push(()=>{MenuBar.removeAction("tools.bake_textures")});var S=e=>{if(!Project||Texture.all.length===0)return;let a=!1;Project.elements.forEach(t=>{t instanceof Cube&&Object.keys(t.faces).forEach(r=>{let o=t.faces[r].getTexture();if(!o)return;let l=Project.materials[o.uuid];l.isShaderMaterial&&!Project.bb_materials[o.uuid]&&(Project.bb_materials[o.uuid]=l);let i=new L(o.layers_enabled?o.layers.filter(h=>h.visible)??null:Project.textures,o.uuid).getMaterial(e);i.side=Canvas.getRenderSide(o),Project.materials[o.uuid]=b.ShaderMaterial.prototype.copy.call(i,l),Canvas.updateAllFaces(o),a=!0})}),Project.pbr_active=a};var $={};w.push(()=>{Object.entries(d).forEach(([e,a])=>{$[e]=new Action(`assign_channel_${e}`,{icon:a.icon??"tv_options_edit_channels",name:`Assign to ${a.label.toLocaleLowerCase()} channel`,description:`Assign the selected layer to the ${a.label} channel`,category:"textures",condition:{selected:{texture:!0}},click(t){let r=TextureLayer.selected??(Project?Project.selected_texture:null);if(!r||!Project)return;Undo.initEdit({layers:[r]}),r.extend({channel:a.id});let n=r instanceof TextureLayer?r.texture:r;n.updateChangesAfterEdit(),Project.pbr_materials[n.uuid]||(Project.pbr_materials[n.uuid]={}),Object.entries(Project.pbr_materials[n.uuid]).forEach(([o,l])=>{l===r.uuid&&(delete Project.pbr_materials[n.uuid][o],r.channel=B)}),n.uuid===r.uuid&&(Project.pbr_materials[n.uuid]={}),Project.pbr_materials[n.uuid][e]=r.uuid,Undo.finishEdit("Change channel assignment"),Blockbench.showQuickMessage(`Assigned "${r.name}" to ${a.label} channel`,2e3),S()}})})});E.push(()=>{Object.entries($).forEach(([e,a])=>{a?.delete()})});w.push(()=>{s.unassignChannel=new Action("unassign_channel",{icon:"cancel",name:"Unassign Channel",description:"Unassign the selected layer from the channel",category:"textures",condition:{selected:{texture:!0},method(){let e=TextureLayer.selected??(Project?Project.selected_texture:null);return!e||!Project?!1:e.channel&&e.channel!==B}},click(){let e=TextureLayer.selected??(Project?Project.selected_texture:null);if(!e||!Project)return;Undo.initEdit({layers:[e]});let a=e instanceof TextureLayer?e.texture:e,t=e.channel;Project.pbr_materials[a.uuid]={},e.channel=B,a.updateChangesAfterEdit(),Undo.finishEdit("Unassign channel"),Blockbench.showQuickMessage(`Unassigned "${e.name}" from ${t} channel`,2e3),S()}}),s.channelMenu=new Menu("channel_menu",[...Object.keys(d).map(e=>`assign_channel_${e}`),"unassign_channel"],{onOpen(){S()}}),s.openChannelMenu=new Action("pbr_channel_menu",{name:"Assign to PBR Channel",icon:"texture",click(e){s.channelMenu?.open(e)},children:[...Object.values($),s.unassignChannel]}),s.showChannelMenu=new Action("show_channel_menu",{icon:"texture",name:"Assign to PBR Channel",description:"Assign the selected layer to a channel",category:"textures",condition:{modes:["paint"],selected:{texture:!0}},click(e){s.channelMenu?.open(e)}})});w.push(()=>{s.openChannelMenu&&(MenuBar.addAction(s.openChannelMenu,"image.0"),Texture.prototype.menu.addAction(s.openChannelMenu,"0"),TextureLayer.prototype.menu.addAction(s.openChannelMenu,"0")),Toolbars.layers.add(s.showChannelMenu,1)});E.push(()=>{MenuBar.removeAction("image.pbr_channel_menu"),Texture.prototype.menu.removeAction("pbr_channel_menu"),TextureLayer.prototype.menu.removeAction("pbr_channel_menu"),Toolbars.layers.remove(s.showChannelMenu)});w.push(()=>{s.generateNormal=new Action("generate_normal",{icon:"altitude",name:"Generate Normal Map",description:"Generates a normal map from the height map",condition:()=>(TextureLayer.selected||Texture.all.find(e=>e.selected))!==void 0,click(){let e=TextureLayer.selected??(Project&&Project.selected_texture?Project.selected_texture.selected_layer??Project.selected_texture:Texture.getDefault());if(!e)return;let a=new L(e instanceof Texture&&e.layers_enabled?e.layers:null,e.uuid),t=a.createNormalMap(e);if(t){a.saveTexture(d.normal,t),t.select(),Blockbench.showQuickMessage("Normal map generated",2e3);return}Blockbench.showQuickMessage("Failed to generate normal map",2e3)}}),MenuBar.addAction(s.generateNormal,"tools")});E.push(()=>{MenuBar.removeAction("tools.generate_normal")});var q=(e,a)=>{let t=a??document.createElement("canvas"),r=t.getContext("2d");if(!r)return null;let n=Math.max(Project?Project.texture_width:16,16),o=Math.max(Project?Project.texture_height:16,16);return t.width=n,t.height=o,r.fillStyle=`rgb(${e.r*255}, ${e.g*255}, ${e.b*255})`,r.fillRect(0,0,n,o),t.toDataURL()};w.push(()=>{s.createMaterialTexture=new Action("create_material_texture",{icon:"stacks",name:"Create Material Texture",description:"Creates a new texture for a PBR material",click(){if(!Project)return;let e={...d},a=new Texture({name:"New Material",saved:!1,particle:!1,keep_size:!1,layers_enabled:!0}),t=Texture.all.filter(o=>o.selected||o.multi_selected)??Texture.all,r=Texture.selected?new L(t,Texture.selected.uuid):null;try{let o=r?.findTexture(d.albedo,!0)?.canvas.toDataURL()??Texture.selected?.canvas.toDataURL()??q(new b.Color(8421504),a.canvas);if(!o)return;a.fromDataURL(o);let l=new TextureLayer({name:e.albedo.label,visible:!0,data_url:o},a);l.extend({channel:e.albedo.id}),l.addForEditing(),l.texture.updateChangesAfterEdit(),delete e.albedo}catch(o){console.warn("Failed to create base color texture",o),Blockbench.showStatusMessage("Failed to create base color texture in new material",3e3)}let n=Object.keys(e).map(o=>{let l=d[o],i=r?.findTexture(l,!0),h=i?i.canvas.toDataURL():q(l.default??new b.Color(0));if(!h)return;let p=new TextureLayer({name:l.label,visible:!0,data_url:h},a);return p.extend({channel:l.id}),p}).filter(Boolean);Undo.initEdit({textures:Texture.all,layers:n}),a.add().select(),n.map(o=>o.addForEditing()),a.updateChangesAfterEdit(),Undo.finishEdit("Create Material Texture")}}),MenuBar.addAction(s.createMaterialTexture,"tools"),Toolbars.texturelist.add(s.createMaterialTexture,3)});E.push(()=>{MenuBar.removeAction("tools.create_material_texture")});function O(){return Texture.selected?Texture.selected:TextureLayer.selected?TextureLayer.selected.texture:Project?Project.selected_texture?Project.selected_texture:Project.textures.find(e=>e.selected)??null:Texture.all.find(e=>e.selected)??Texture.getDefault()}function X(){return Project?Project.model_identifier.length>0?Project.model_identifier:Project.getDisplayName():pathToName(O()?.name??"texture")}var R=(e,a)=>{let t=O(),r=new L(t.layers_enabled?t.layers:Project?Project.textures:null,t.uuid).createMer(!0);if(!r)throw new Error("Failed to generate MER map from selected texture.");r.toBlob(async n=>{if(!n)throw new Error("Failed to save MER map.");let[o,l]=Project?[e?`${e}_mer`:`${t.name??Project.getDisplayName()}_mer`,Project.export_path]:["mer"];Blockbench.export({content:await n.arrayBuffer(),type:"PNG",name:o,extensions:["png"],resource_id:"mer",savetype:"image",startpath:l},a)})};function _e(){s.generateMer=new Action("create_mer",{icon:"lightbulb_circle",name:"Export MER",description:"Exports a texture map from the metalness, emissive, and roughness channels. (For use in Bedrock resource packs.)",condition:{formats:["bedrock_block","bedrock_entity"],project:!0},click(){try{R()}catch(e){console.error("Failed to export MER map:",e),Blockbench.showStatusMessage("Failed to export MER map",3e3)}}}),s.decodeMer=new Action("decode_mer",{icon:"arrow_split",name:"Decode MER",description:"Decodes a MER texture map into metalness, emissive, and roughness channels",condition:()=>!!Project&&Project.selected_texture!==null&&!Project.selected_texture.layers_enabled,click(){let e=TextureLayer.selected?.texture??Texture.all.find(n=>n.selected)??Texture.getDefault(),a=new L(e.layers_enabled?e.layers:[e],e.uuid),t=a.decodeMer(),r=[d.metalness,d.emissive,d.roughness];Undo.initEdit({textures:[e]}),e.activateLayers(!0),r.forEach(n=>{let o=n.id,l=t[o];if(!l){Blockbench.showStatusMessage(`Failed to decode ${n.label} channel`,3e3);return}let i=new TextureLayer({name:`${e?.name}_${o}`,data_url:l.toDataURL()},e);a.saveTexture(n,i),i.addForEditing()}),Undo.finishEdit("Decode MER")}}),MenuBar.addAction(s.decodeMer,"tools"),MenuBar.addAction(s.generateMer,"file.export")}function ye(){MenuBar.removeAction("file.export.create_mer"),MenuBar.removeAction("tools.decode_mer")}w.push(_e);E.push(ye);var we=()=>{Project&&Project.textures.forEach(e=>{let a=new L(null,e.uuid),t=a.findTexture(d.normal,!1),r=a.findTexture(d.height,!1),n=a.findTexture(d.albedo,!1),o=a.findTexture(d.metalness,!1)?.name,l=a.findTexture(d.emissive,!1)?.name,i=a.findTexture(d.roughness,!1)?.name,h={};return n||(h.baseColor={type:"color",label:"Base Color",value:"#ff00ff"}),!o&&!l&&!i&&(h.metalness={label:"Metalness",type:"range",min:0,max:255,step:1,value:0},h.emissive={label:"Emissive",type:"range",min:0,max:255,step:1,value:0},h.roughness={label:"Roughness",type:"range",min:0,max:255,step:1,value:0}),t&&(h.depthMap={type:"checkbox",label:"Normal Map",value:"normal"}),r&&(h.depthMap={type:"checkbox",label:"Height Map",value:"heightmap"}),t&&r&&(h.depthMap={type:"radio",label:"Depth Map",options:{normal:"Normal Map",heightmap:"Height"},value:"normal"}),s.textureSetDialog=new Dialog("texture_set",{id:"texture_set",title:"Create Texture Set JSON",buttons:["Create","Cancel"],form:h,cancelIndex:1,onConfirm(p){let f=X(),u=o||l||i,_={format_version:"1.16.100","minecraft:texture_set":{color:(n?f:p.baseColor?.toHexString())??f,metalness_emissive_roughness:[p.metalness??0,p.emissive??0,p.roughness??255]}};p.depthMap==="normal"&&t||!r&&t?_["minecraft:texture_set"].normal=`${f}_normal`:(!t||p.depthMap==="heightmap")&&r&&(_["minecraft:texture_set"].heightmap=`${f}_heightmap`);let x=c=>{if(!p.depthMap)return c();let g=p.depthMap==="normal"||p.depthMap&&!r,y=g?t:r;if(!y)return c();Blockbench.export({content:y.canvas.toDataURL()??"",type:"PNG",name:`${f}_${g?"normal":"heightmap"}`,extensions:["png"],resource_id:p.depthMap,startpath:Project.export_path,savetype:"image"},C=>{_["minecraft:texture_set"][g?"normal":"heightmap"]=pathToName(C,!1),c()})},v=c=>{if(!n)return c();Blockbench.export({content:n.canvas.toDataURL(),extensions:["png"],type:"PNG",name:f,startpath:Project.export_path,savetype:"image"},g=>{_["minecraft:texture_set"].color=pathToName(g,!1),c()})},m=()=>x(()=>{v(()=>{Blockbench.export({content:JSON.stringify(_,null,2),type:"JSON",name:`${f}.texture_set`,extensions:["json"],resource_id:"texture_set",startpath:Project.export_path,savetype:"text"},()=>{Blockbench.showQuickMessage("Texture set created",2e3),s.textureSetDialog?.hide()})})});if(u){try{R(f,c=>{_["minecraft:texture_set"].metalness_emissive_roughness=pathToName(c,!1),m()})}catch(c){console.warn("Failed to export MER map:",c),Blockbench.showStatusMessage("Failed to export MER map",3e3)}return}m()}}),s.textureSetDialog.show()})};w.push(()=>{s.createTextureSet=new Action("create_texture_set",{name:"Create Texture Set",icon:"layers",description:"Creates a texture set JSON file. Generates a MER when metalness, emissive, or roughness channels are set.",click(){we()},condition:{formats:["bedrock_block","bedrock_entity"],project:!0}}),MenuBar.addAction(s.createTextureSet,"file.export")});E.push(()=>{MenuBar.removeAction("file.export.create_texture_set")});w.push(()=>{s.toggleCorrectLights=new Toggle("correct_lights",{category:"preview",name:"Correct Lights",description:"Corrects the lighting in the preview",icon:"fluorescent",default:!1,onChange(e){Preview.all.forEach(a=>{a.renderer.physicallyCorrectLights=e}),Preview.selected.renderer.physicallyCorrectLights=e,Blockbench.showQuickMessage(`Physically corrected lighting is now ${e?"enabled":"disabled"}`,2e3),e&&s.togglePbr?.set(!0),S()},click(){}}),MenuBar.addAction(s.toggleCorrectLights,"preview")});E.push(()=>{MenuBar.removeAction("preview.correct_lights")});var H=()=>{!Project||!Project.bb_materials||(Project.elements.forEach(e=>{e instanceof Cube&&Object.keys(e.faces).forEach(a=>{let r=e.faces[a].getTexture();if(!r)return;let n=Project.bb_materials[r.uuid];n&&(Project.materials[r.uuid]=n)})}),Project.pbr_active=!1,Canvas.updateAll())};var K=["undo","redo","add_texture","finish_edit","finished_edit","load_project","select_preview_scene","change_texture_path","select_project"],Y=()=>Project&&Project.pbr_active&&S(),Ce=()=>{K.forEach(e=>{Blockbench.addListener(e,Y)})},Z=()=>{K.forEach(e=>{Blockbench.removeListener(e,Y)})};w.push(()=>{s.togglePbr=new Toggle("toggle_pbr",{name:"PBR Preview",description:"Toggle PBR Preview",icon:"panorama_photosphere",category:"view",default:!1,click(){},onChange(e){if(e){S(),Ce(),Blockbench.showQuickMessage("PBR Preview is now enabled");return}H(),Z(),Blockbench.showQuickMessage("PBR Preview is now disabled")}}),MenuBar.addAction(s.togglePbr,"view")});E.push(()=>{Z(),MenuBar.removeAction("view.toggle_pbr")});var ee=e=>{let a=Math.max(-2,Math.min(2,Number(e)));Preview.all.forEach(t=>{t.renderer.toneMappingExposure=a}),Preview.selected.renderer.toneMappingExposure=a};w.push(()=>{s.exposureSlider=new BarSlider("display_settings_exposure",{category:"preview",name:"Exposure",description:"Adjusts the exposure of the scene",type:"number",value:1,icon:"exposure",step:.1,min:-2,max:2,onBefore(){Number(s.tonemappingSelect?.get())===b.NoToneMapping&&s.tonemappingSelect.change(b.LinearToneMapping.toString()),s.togglePbr?.set(!0)},onChange({value:e}){ee(e)},onAfter(){S()}}),s.resetExposureButton=new Action("display_settings_reset_exposure",{category:"preview",name:"Reset Exposure",description:"Resets the exposure of the scene",icon:"exposure_plus_1",condition:()=>s.exposureSlider!==void 0&&Number(s.exposureSlider?.get())!==1,click(){ee(1),s.exposureSlider?.set(1),S()}}),s.tonemappingSelect=new BarSelect("display_settings_tone_mapping",{category:"preview",name:"Tone Mapping",description:"Changes the tone mapping of the preview",type:"select",default_value:b.NoToneMapping,value:Preview.selected.renderer.toneMapping??b.NoToneMapping,icon:"monochrome_photos",options:{[b.NoToneMapping]:"No Tone Mapping",[b.LinearToneMapping]:"Linear",[b.ReinhardToneMapping]:"Reinhard",[b.CineonToneMapping]:"Cineon",[b.ACESFilmicToneMapping]:"ACES"},onChange({value:e}){let a=Number(s.exposureSlider?.get()??1);Preview.all.forEach(t=>{t.renderer.toneMapping=Number(e),t.renderer.toneMappingExposure=a}),Preview.selected.renderer.toneMapping=Number(e),Preview.selected.renderer.toneMappingExposure=a,Blockbench.showQuickMessage(`Tone mapping set to ${this.getNameFor(e)}`,2e3),s.togglePbr&&!s.togglePbr.value&&s.togglePbr.set(!0),S()}})});var Me=(e,a="texture")=>{e.toBlob(async t=>{t&&Blockbench.export({content:await t.arrayBuffer(),type:"PNG",name:`${a}_n`,extensions:["png"],resource_id:"normal_map",savetype:"image"})})},Pe=(e,a="texture")=>{e.toBlob(async t=>{t&&Blockbench.export({content:await t.arrayBuffer(),type:"PNG",name:`${a}_s`,extensions:["png"],resource_id:"specular_map",savetype:"image"})})};w.push(()=>{s.generateLabPbr=new Action("generate_lab_pbr",{icon:"experiment",name:"Generate labPBR textures",description:"Generate a specular and normal map in labPBR format for Java shaders",condition:{formats:["java_block"],project:!0},async click(){let e=Project.selected_texture;if(!e)return;let t=new L(e.layers_enabled?e.layers:[e],e.uuid).createLabPbrOutput();if(t===null)return;let r=e.name??(Project?Project.getDisplayName():"texture");await Promise.all([Me(t.normalMap,pathToName(r)),Pe(t.specular,pathToName(r))]),Blockbench.showQuickMessage("Exported labPBR textures")}}),s.decodeLabPbr=new Action("decode_lab_pbr",{icon:"frame_source",name:"Decode labPBR textures",description:"Decodes the selected texture into a specular or normal map in labPBR format",condition:()=>!!Project&&Project.selected_texture!==null,click(){let e=TextureLayer.selected?.texture??Texture.all.find(t=>t.selected)??Texture.getDefault(),a=new L(e.layers_enabled?e.layers:[e],e.uuid);if(e.name.endsWith("_n")||e.name.endsWith("_n.png")){a.createTexturesFromNormal(e);return}if(e.name.endsWith("_s")||e.name.endsWith("_s.png")){a.createTexturesFromSpecular(e);return}Blockbench.showQuickMessage("Failed to decode labPBR texture")}}),MenuBar.addAction(s.generateLabPbr,"file.export"),MenuBar.addAction(s.decodeLabPbr,"tools")});E.push(()=>{MenuBar.removeAction("file.export.generate_lab_pbr")});var U=class e{constructor({colors:a}){this._colors={...Object.fromEntries(Object.keys(d).map(t=>[t,d[t].default??new b.Color(4294967040)])),...a}}get colors(){return this._colors}set colors(a){this._colors={...this._colors,...a}}toString(){let a=Object.entries(this._colors).map(([t,r])=>[t,r.getHexString()]);return JSON.stringify(a)}getChannel(a){return this._colors[a]}static makeLinearColor(a){let t=Math.min(1,Math.max(0,a));return new b.Color(t,t,t).convertSRGBToLinear()}static fromSettings(){let a="#000000",t=Number(s.brushMetalnessSlider?.get()),r=Number(s.brushRoughnessSlider?.get()??1),n=(s.brushEmissiveColor?.get()??a).toString(),o=Number(s.brushHeightSlider?.get()),l=ColorPanel.get(),i={[d.albedo.id]:new b.Color(l),[d.metalness.id]:e.makeLinearColor(t),[d.roughness.id]:e.makeLinearColor(r),[d.emissive.id]:new b.Color(n??a),[d.height.id]:e.makeLinearColor(o),[d.normal.id]:d.normal.default??new b.Color("#8080ff")};return new e({colors:i})}};var Te=e=>{let a=new b.WebGLRenderer({alpha:!0,antialias:!0}),t=new b.Scene,r=new b.PerspectiveCamera(75,96/96,.1,1e3),n=new b.AmbientLight(16777215,.75);t.add(n);let o=new b.PointLight(16777215,1,100);o.position.set(5,5,5),t.add(o);let l=new b.SphereGeometry(1,32,32),i=new b.MeshStandardMaterial({color:e.albedo,metalness:e.metalness??0,roughness:e.roughness??1,emissive:e.emissive,bumpScale:e.height??0,envMap:PreviewScene.active?.cubemap??null,envMapIntensity:.5}),h=new b.Mesh(l,i);return t.add(h),r.position.x=0,r.position.y=0,r.position.z=2,a.setSize(96,96),a.render(t,r),a.domElement.toDataURL()},te="materialBrushPresets",F=()=>JSON.parse(localStorage.getItem(te)||"{}"),Ee=(e,a)=>{let t=F(),r=a??guid(),n=s.userMaterialBrushPresets?.getFormResult()??{},o={};return n.albedo&&(o.albedo=n.albedo.toString()),n.metalness&&(o.metalness=Number(n.metalness)),n.roughness&&(o.roughness=Number(n.roughness)),n.emissive&&(o.emissive=n.emissive.toString()),n.height&&(o.height=Number(n.height)),t[r]=[o,e??"New Preset",Te(o)],localStorage.setItem(te,JSON.stringify(t)),r},G=({metalness:e,roughness:a,emissive:t,height:r,albedo:n})=>{e!==void 0&&s.brushMetalnessSlider?.setValue(e||0,!0),a!==void 0&&s.brushRoughnessSlider?.setValue(a??1,!0),t!==void 0&&s.brushEmissiveColor?.set(t??"#000000"),r!==void 0&&s.brushHeightSlider?.setValue(Math.max(0,Math.min(1,r??.5)),!0),n!==void 0&&ColorPanel.set(n)},je=J.extend({name:"UserPresetsDialog",data(){return{userPresets:{},channels:d}},methods:{applyPreset(e){try{let[a,t]=this.userPresets[e],{metalness:r,roughness:n,emissive:o,height:l,albedo:i}=a;G({metalness:Number(r),roughness:Number(n),emissive:o.toString(),height:Number(l),albedo:i.toString()}),s.userMaterialBrushPresets?.hide(),Blockbench.showQuickMessage(`Preset "${t}" applied`,2e3)}catch{Blockbench.showQuickMessage("Failed to apply preset",2e3)}},deletePreset(e){Blockbench.showMessageBox({title:"Delete Preset",message:"Are you sure you want to delete this preset?",confirm:1,cancel:0,buttons:["Cancel","Delete"],checkboxes:{},width:400},a=>{if(a){let t=F(),r=this.userPresets[e][1]??e;delete t[e],localStorage.setItem("materialBrushPresets",JSON.stringify(t)),this.userPresets=t,Blockbench.showQuickMessage(`Preset "${r}" deleted`,2e3)}})},editPreset(e){s.userMaterialBrushPresets?.setFormValues({name:this.userPresets[e][1]??e,...this.userPresets[e][0]})},getSummary(e){return Object.entries(e).filter(([a])=>a in this.channels).map(([a,t])=>a==="albedo"||a==="emissive"?`${this.channels[a]?.label??a}: ${t}`:`${this.channels[a]?.label??a}: ${Number(t).toFixed(1)}`).join(`
`)}},computed:{presets(){return Object.entries(this.userPresets)}},mounted(){this.userPresets=F()},template:`
    <div>
      <ul class="list mobile_scrollbar preset_list">
        <li
          v-for="([key, [settings, name, image]]) in presets"
          :key="key"
          class="user_preset"
        >
          <div v-if="image" class="preset_preview" @click="editPreset(key)">
            <img :src="image" :alt="name" :title="getSummary(settings)" width="96" height="96" />
            <div class="preset_title">{{ name }}</div>
          </div>
          <div v-else>
            <div class="preset_title" @click="editPreset(key)" :title="getSummary(settings)">{{ name }}</div>
          </div>
          <div class="preset_buttons">
            <button class="delete_preset" type="button" @click="deletePreset(key)">
              <i class="material-icons">close</i>
            </button>
          </div>
        </li>
      </ul>
    </div>`});w.push(()=>{s.materialBrushStyles=Blockbench.addCSS(`
  .preset_list {
    display: grid;
    grid-template-columns: repeat(auto-fill, 96px);
    grid-gap: 8px;
    justify-content: start;
    align-items: start;
    margin: 0 auto;
    padding: 8px;
  }

  .user_preset {
    display: flex;
    justify-content: start;
    align-items: center;
    width: 100%;
    padding: 8px;
    position: relative;
  }

  .preset_title {
    font-size: 1em;
    color: var(--color-text);
  }

  .user_preset:hover .preset_title {
    color: var(--color-accent);
  }

  .preset_preview {
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
    justify-content: center;
    align-items: center;
    text-align: center;
  }

  .preset_buttons {
    display: flex;
    flex-direction: row;
    align-items: center;
    font-size: 0.8em;
    padding: 0 4px;
  }

  .preset_channel {
    display: flex;
    flex-direction: row;
    align-items: center;
    margin: 0 8px;
    font-size: 0.8em;
  }

  .delete_preset {
    margin-left: 8px;
    padding: 4px;
    height: 24px;
    width: 24px;
    min-width: 24px;
    background-color: transparent;
    color: var(--color-text);
    border: none;
    border-radius: 100%;
    position: absolute;
    right: -8px;
    top: 0;
    filter: drop-shadow(0 0 2px var(--color-shadow));
  }

  .delete_preset .material-icons {
    font-size: 0.825em;
  }

  .delete_preset:hover {
    background: transparent;
    color: var(--color-accent);
  }

  .delete_preset:hover .material-icons {
    color: var(--color-accent);
  }
  `),s.brushMetalnessSlider=new NumSlider("slider_brush_metalness",{category:"paint",name:"Metalness",description:"Adjust the metalness of the brush",settings:{min:0,max:1,step:.01,default:0},condition:()=>{if(!Project)return!1;let e=Project.selected_texture;return e?.layers_enabled?e.layers.find(({channel:a})=>a===d.metalness.id)!==void 0:!1}}),s.brushRoughnessSlider=new NumSlider("slider_brush_roughness",{category:"paint",name:"Roughness",description:"Adjust the roughness of the brush",settings:{min:0,max:1,step:.01,default:1},condition:()=>{if(!Project)return!1;let e=Project.selected_texture;return e?.layers_enabled?e.layers.find(({channel:a})=>a===d.roughness.id)!==void 0:!1}}),s.brushEmissiveColor=new ColorPicker("brush_emissive_color",{category:"paint",name:"Emissive",description:"Adjust the emissive color of the brush",value:"#000000",condition:()=>{if(!Project)return!1;let e=Project.selected_texture;return e?.layers_enabled?e.layers.find(({channel:a})=>a===d.emissive.id)!==void 0:!1}}),s.brushHeightSlider=new NumSlider("slider_brush_height",{category:"paint",name:"Height",description:"Adjust the height of the brush",settings:{min:0,max:1,step:.01,default:.5},condition:()=>{if(!Project)return!1;let e=Project.selected_texture;return e?.layers_enabled?e.layers.find(({channel:a})=>a===d.height.id)!==void 0:!1}}),s.materialBrushPresets=new BarSelect("brush_presets",{category:"paint",name:"Material Brush Presets",description:"Select a preset for the material brush",options:{matte:"Matte",gloss:"Gloss",metal:"Dull Metal",polished:"Polished Metal",glowing:"Glowing"},onChange({value:e}){G(e),s.materialBrushTool?.select(),S()}}),s.materialBrushTool=new Tool("material_brush",{name:"Material Brush",description:"Paints across multiple texture layers",icon:"view_in_ar",paintTool:!0,cursor:"cell",condition:()=>Modes.paint&&!!Project&&Project.selected_texture&&Project.selected_texture.layers_enabled,brush:{blend_modes:!1,shapes:!0,size:!0,softness:!0,opacity:!0,offset_even_radius:!0,floor_coordinates:!0,changePixel(e,a,t,r,{size:n,softness:o,texture:l}){let i=U.fromSettings(),h=Object.keys(i.colors),p=t;return l.layers.forEach(f=>{if(!f.visible||!h.includes(f.channel))return;let u=i.getChannel(f.channel);u&&(f.ctx.fillStyle=u.getStyle(),f.ctx.fillRect(n*e,n*a,n,n),f.selected&&(p={r:u.r*255,g:u.g*255,b:u.b*255,a:r*255}))}),p}},onCanvasClick(e){Painter.startPaintToolCanvas(e,e.event)},onSelect(){S()},click(){S()}}),s.loadBrushPreset=new Action("load_brush_preset",{icon:"stroke_full",name:"Material Brush Presets",description:"Load or save a brush preset",category:"paint",condition:()=>!!Project,click(){s.userMaterialBrushPresets=new Dialog("user_brush_presets",{id:"user_brush_presets",title:"Edit Material Brush",component:je,part_order:["lines","component","form"],form:{albedo:{type:"color",label:"Albedo",value:ColorPanel.get(),toggle_enabled:!0},metalness:{type:"number",label:"Metalness",min:0,max:1,step:.01,full_width:!1,toggle_enabled:!0},roughness:{type:"number",label:"Roughness",min:0,max:1,step:.01,toggle_enabled:!0,full_width:!1},emissive:{type:"color",label:"Emissive",value:"#000000",toggle_enabled:!0},height:{type:"number",label:"Height",min:0,max:1,step:.01,toggle_enabled:!0}},onConfirm(e){G({metalness:Number(e.metalness??s.brushMetalnessSlider?.get()),roughness:Number(e.roughness??s.brushRoughnessSlider?.get()),emissive:(e.emissive??s.brushEmissiveColor?.get()).toString(),height:Number(e.height??s.brushHeightSlider?.get()),albedo:(e.albedo??ColorPanel.get()).toString()})},buttons:["Close","Save","Apply"],cancelIndex:0,confirmIndex:2,onButton(e,a){e===1&&Blockbench.textPrompt("Save Preset","New Preset",t=>{t&&(Ee(t),Blockbench.showQuickMessage(`Preset "${t}" saved`,2e3))})}}).show()}}),MenuBar.addAction(s.materialBrushTool,"tools.0")});E.push(()=>{MenuBar.removeAction("tools.material_brush")});w.push(()=>{s.materialBrushPanel=new Panel("material_brush_panel",{name:"Material Brush",id:"material_brush_panel",icon:"view_in_ar",toolbars:[new Toolbar("material_brush_toolbar",{id:"material_brush_toolbar",children:["material_brush","slider_brush_metalness","slider_brush_roughness","brush_emissive_color","slider_brush_height"],name:"Material Brush"}),new Toolbar("material_brush_presets_toolbar",{id:"material_brush_presets_toolbar",children:["load_brush_preset","brush_presets"],name:"Brush Presets",label:!0})],display_condition:{modes:["paint"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"right",default_position:{slot:"right_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"color",insert_before:"outliner"})});w.push(()=>{s.displaySettingsPanel=new Panel("display_settings",{name:"PBR Display Settings",id:"display_settings_panel",icon:"display_settings",toolbars:[new Toolbar("controls_toolbar",{id:"controls_toolbar",children:["toggle_pbr","correct_lights","display_settings_tone_mapping","display_settings_exposure","display_settings_reset_exposure"],name:"Display Settings"})],display_condition:{modes:["edit","paint","animate"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"left",default_position:{slot:"left_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"textures",insert_before:"color"})});(()=>{let e=()=>{w.forEach(t=>t())},a=()=>{H(),E.forEach(t=>t()),Object.entries(s).forEach(([t,r])=>{try{r?.delete()}catch(n){console.warn(`Failed to delete ${t} action:`,n)}})};BBPlugin.register("pbr_preview",{version:"1.1.0",title:"PBR Features",author:"Jason J. Gardner",description:"Create RTX/Deferred Rendering textures in Blockbench. Adds support for previewing PBR materials and exporting them in Minecraft-compatible formats.",tags:["PBR","RTX","Deferred Rendering"],icon:"icon.png",variant:"both",await_loading:!0,new_repository_format:!0,repository:"https://github.com/jasonjgardner/blockbench-plugins",has_changelog:!0,min_version:"4.10.2",onload:e,onunload:a})})();})();
