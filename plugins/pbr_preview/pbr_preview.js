"use strict";(()=>{var M=THREE,ae=Vue,re=window.JSZip;var A="_NONE_",g={albedo:{id:"albedo",label:"Albedo",description:"The color of the material",map:"map",icon:"tonality",default:new M.Color(16777215),regex:new RegExp("(s|_)*(basecolor|color|albedo)","i")},metalness:{id:"metalness",label:"Metalness",description:"The material's metalness map",map:"metalnessMap",icon:"brightness_6",default:new M.Color(0),regex:new RegExp("[ _]*metal(lic|ness)?","i")},emissive:{id:"emissive",label:"Emissive",description:"The material's emissive map",map:"emissiveMap",icon:"wb_twilight",default:new M.Color(0),regex:new RegExp("[ _]*(emissive|emission)","i")},roughness:{id:"roughness",label:"Roughness",description:"The material's roughness map",map:"roughnessMap",icon:"grain",default:new M.Color(16777215),regex:new RegExp("[ _]*rough(ness)?","i")},height:{id:"height",label:"Height",description:"The material's height map",map:"bumpMap",icon:"landscape",default:new M.Color(16777215),regex:new RegExp("[ _]*(height|bump)","i")},normal:{id:"normal",label:"Normal",description:"The material's normal map",map:"normalMap",icon:"looks",default:new M.Color("rgb(128, 128, 255)"),regex:new RegExp("[ _]*normal","i")},ao:{id:"ao",label:"Ambient Occlusion",description:"The material's ambient occlusion map",map:"aoMap",icon:"motion_mode",default:new M.Color(16777215),regex:new RegExp("[ _]*(ao|ambientocclusion|ambient occlusion)","i")}},o={},w=[],P=[];var ne=[...Object.keys(g).map(t=>g[t].id),A];w.push(()=>{o.channelProp=new Property(TextureLayer,"enum","channel",{default:A,values:ne,label:"PBR Channel",exposed:!1}),o.textureChannelProp=new Property(Texture,"enum","channel",{default:A,values:ne,label:"PBR Channel",exposed:!1}),o.materialTextureProp=new Property(Texture,"boolean","material",{default:!1,label:"Material Texture"}),o.pbrMaterialsProp=new Property(ModelProject,"object","pbr_materials",{default:{},exposed:!1,label:"PBR Materials"}),o.projectMaterialsProp=new Property(ModelProject,"object","bb_materials",{default:{},exposed:!1,label:"Project Materials"}),o.projectPbrModeProp=new Property(ModelProject,"boolean","pbr_active",{default:!1,exposed:!1,values:[],label:"PBR Mode"})});function S(){return Texture.selected?Texture.selected:TextureLayer.selected?TextureLayer.selected.texture:Project?Project.selected_texture?Project.selected_texture:Project.textures.find(t=>t.selected)??null:Texture.all.find(t=>t.selected)??Texture.getDefault()}function N(){return TextureLayer.selected?TextureLayer.selected:Texture.selected?.selected_layer?Texture.selected.selected_layer:Project.selected_texture!==null&&Project.selected_texture?.layers_enabled===!0?Project.selected_texture.layers.find(t=>t.selected)??Project.selected_texture.layers[0]:S()?.getActiveLayer()??null}function I(){return Project?Project.model_identifier.length>0?Project.model_identifier:Project.getDisplayName():pathToName(S()?.name??"texture")}function se(t,a){let e;return function(...r){let n=()=>{e=void 0,t.apply(this,r)};clearTimeout(e),e=setTimeout(n,a)}}function U(t){let a=MediaPreview.renderer??new M.WebGLRenderer({alpha:!0,antialias:!0}),e=new M.Scene,r=new M.PerspectiveCamera(75,96/96,.1,1e3),n=new M.AmbientLight(16777215,.75);e.add(n);let i=new M.PointLight(16777215,1,100);i.position.set(5,5,5),e.add(i);let s=new M.SphereGeometry(1,32,32),l=t instanceof M.MeshStandardMaterial&&t.isMeshStandardMaterial?t:new M.MeshStandardMaterial({color:t.albedo,metalness:t.metalness??0,roughness:t.roughness??1,emissive:t.emissive,bumpScale:t.height??0,envMap:PreviewScene.active?.cubemap??null,envMapIntensity:.5}),p=new M.Mesh(s,l);e.add(p),r.position.x=0,r.position.y=0,r.position.z=2,a.setSize(96,96),a.render(e,r);let h=a.domElement.toDataURL();return l.dispose(),MediaPreview.renderer||(a.clear(),a.dispose()),h}function J(t,a){let e=a??document.createElement("canvas"),r=e.getContext("2d");if(!r)return e.remove(),null;let n=Math.max(Project?Project.texture_width:16,16),i=Math.max(Project?Project.texture_height:16,16);e.width=n,e.height=i,r.fillStyle=`rgb(${t.r*255}, ${t.g*255}, ${t.b*255})`,r.fillRect(0,0,n,i);let s=e.toDataURL();return a||e.remove(),s}var Ie=(t=!0)=>{let a=Project?Project.textures??Texture.all:Texture.all;return t?a.filter(e=>e.layers_enabled&&e.layers.length>0).flatMap(e=>e.layers):a},D=class t{constructor(a,e){this._scope=a??Ie(),this._materialUuid=e}merToCanvas(){let a=this.getTexture(g.emissive),e=this.getTexture(g.roughness),r=this.getTexture(g.metalness);if(!a&&!e&&!r){let{metalness:n,emissive:i,roughness:s}=this.decodeMer();n&&(r=t.makePixelatedCanvas(n)),i&&(a=t.makePixelatedCanvas(i)),s&&(e=t.makePixelatedCanvas(s))}return{emissiveMap:a,roughnessMap:e,metalnessMap:r}}getMaterial(a={}){let{emissiveMap:e,roughnessMap:r,metalnessMap:n}=Format.id.startsWith("bedrock")?this.merToCanvas():{emissiveMap:this.getTexture(g.emissive),roughnessMap:this.getTexture(g.roughness),metalnessMap:this.getTexture(g.metalness)},i=this.getTexture(g.normal);return new M.MeshStandardMaterial({map:this.getTexture(g.albedo)??t.makePixelatedCanvas(TextureLayer.selected?.canvas??Texture.all.find(s=>s.selected)?.canvas??Texture.getDefault().canvas),aoMap:this.getTexture(g.ao),bumpMap:this.getTexture(g.height),normalMap:i,normalScale:new M.Vector2(-1,1),metalnessMap:n,metalness:n?1:0,roughnessMap:r,roughness:1,emissiveMap:e,emissiveIntensity:e?1:0,emissive:e?16777215:0,envMap:PreviewScene.active?.cubemap??null,envMapIntensity:.95,alphaTest:.1,transparent:!0,...a})}renderMaterialPreview(){return U(this.getMaterial())}saveTexture(a,e){Project&&(Project.pbr_materials||(Project.pbr_materials={}),Project.pbr_materials[this._materialUuid]||(Project.pbr_materials[this._materialUuid]={}),Project.pbr_materials[this._materialUuid][a.id]=e.uuid,e.extend({channel:a.id}))}findTexture(a,e=!0){if(!Project)return null;let r=this._scope.find(p=>p.channel&&(p.channel===a||p.channel===a.id));if(r)return r;let[n,i]=typeof a=="string"?[a,new RegExp(`_*${a}(.[^.]+)?$`,"i")]:[a.id,a.regex??new RegExp(`_*${a.id}(.[^.]+)?$`,"i")];Project.pbr_materials=Project.pbr_materials??{};let s=Project.pbr_materials[this._materialUuid];if(e&&!s&&n!==A)return this._scope.find(p=>i?.test(p.name))??null;let l=s?.[n];return l?this._scope.find(p=>p.uuid===l)??null:null}static makePixelatedCanvas(a){let e=new M.CanvasTexture(a,void 0,void 0,void 0,M.NearestFilter,M.NearestFilter);return e.needsUpdate=!0,e}getTexture(a){let e=this.findTexture(a);return e?t.makePixelatedCanvas(e.canvas):null}static extractChannel(a,e){let r=a.canvas,{width:n,height:i}=r,s=r.getContext("2d");if(!s||!n||!i)return null;let l=document.createElement("canvas");l.width=n,l.height=i;let p=l.getContext("2d");if(!p)return null;let h={r:0,g:1,b:2,a:3}[e],{data:m}=s.getImageData(0,0,n,i),u=new Uint8ClampedArray(n*i*4);for(let d=0;d<m.length;d+=4){let f=m[d+h];u[d]=f,u[d+1]=f,u[d+2]=f,u[d+3]=255}let b=new ImageData(u,n,i);return p.putImageData(b,0,0),l}decodeMer(a=1){let e=this.findTexture("mer",!0);if(!e)return{metalness:null,emissive:null,emissiveLevel:null,roughness:null,sss:null};let r=t.extractChannel(e,"r"),n=t.extractChannel(e,"g"),i=t.extractChannel(e,"b"),s=t.extractChannel(e,"a"),l=document.createElement("canvas");l.width=e.img.width??16,l.height=e.img.height??16;let p=this.findTexture(g.albedo);p&&(l.width=p.img.width??16,l.height=p.img.height??16);let h=l.getContext("2d"),m=n?.getContext("2d"),u=p?.canvas?.getContext("2d");if(!h||!u||!m)return{metalness:r,emissive:n,roughness:i,sss:s};let b=u.getImageData(0,0,l.width,l.height),d=m.getImageData(0,0,l.width,l.height),f=new Uint8ClampedArray(l.width*l.height*4);for(let c=0;c<b.data.length;c+=4){if(d.data[c]>a){f[c]=b.data[c],f[c+1]=b.data[c+1],f[c+2]=b.data[c+2],f[c+3]=255;continue}f[c]=0,f[c+1]=0,f[c+2]=0,f[c+3]=255}return h.putImageData(new ImageData(f,l.width,l.height),0,0),{metalness:r,emissive:l,emissiveLevel:n,roughness:i,sss:s}}createMer(a=!1){let e=this.findTexture(g.metalness,a),r=this.findTexture(g.emissive,a),n=this.findTexture(g.roughness,a),i=this.findTexture("sss",!1),s=Math.max(e?.img.width??0,r?.img.width??0,n?.img.width??0,Project?Project.texture_width:0,16),l=Math.max(e?.img.height??0,r?.img.height??0,n?.img.height??0,Project?Project.texture_height:0,16),p=document.createElement("canvas");p.width=s,p.height=l;let h=p.getContext("2d");if(!h)return null;let m=e?.img?t.extractChannel(e,"r"):null,u=r?.img?t.extractChannel(r,"g"):null,b=n?.img?t.extractChannel(n,"b"):null,d=i&&i?.img?t.extractChannel(i,"a"):null,f=m?.getContext("2d")?.getImageData(0,0,s,l)??new ImageData(s,l),c=u?.getContext("2d")?.getImageData(0,0,s,l)??new ImageData(s,l),x=b?.getContext("2d")?.getImageData(0,0,s,l)??new ImageData(s,l),v=d?.getContext("2d")?.getImageData(0,0,s,l)??new ImageData(new Uint8ClampedArray(s*l*4).fill(255),s,l),_=new Uint8ClampedArray(s*l*4);for(let y=0;y<_.length;y+=4)_[y]=f.data[y],_[y+1]=c.data[y],_[y+2]=x.data[y],_[y+3]=v.data[y];return h.putImageData(new ImageData(_,s,l),0,0),p}createLabPbrOutput(a=!0){let e=this.findTexture(g.metalness,a),r=this.findTexture(g.emissive,a),n=this.findTexture(g.roughness,a),i=this.findTexture(g.normal,a),s=this.findTexture(g.height,a),l=this.findTexture(g.ao,!1),p=this.findTexture("sss",!0),h=this.findTexture("porosity",!0),m=Math.max(e?.img.width??0,r?.img.width??0,n?.img.width??0,Project?Project.texture_width:0,16),u=Math.max(e?.img.height??0,r?.img.height??0,n?.img.height??0,Project?Project.texture_height:0,16),b=document.createElement("canvas");b.width=m,b.height=u;let d=b.getContext("2d"),f=document.createElement("canvas");f.width=m,f.height=u;let c=f.getContext("2d");if(!d||!c)return null;let x=new Uint8ClampedArray(m*u*4),v=new Uint8ClampedArray(m*u*4),_=e?.canvas,y=r?.canvas,k=n?.canvas,T=p?.canvas,L=h?.canvas,C=_?.getContext("2d"),j=y?.getContext("2d"),_e=k?.getContext("2d"),ye=T?.getContext("2d"),we=L?.getContext("2d"),Te=C?.getImageData(0,0,m,u),H=j?.getImageData(0,0,m,u),K=_e?.getImageData(0,0,m,u),Ce=ye?.getImageData(0,0,m,u),Ee=we?.getImageData(0,0,m,u);for(let E=0;E<x.length;E+=4){let te=K?1-Math.sqrt(K.data[E]/255):0,Be=Math.min(229,Math.max(0,Math.round((Te?.data[E]??te)*229))),Ne=Ee?.data[E],$e=Ce?.data[E];if(x[E]=te*255,x[E+1]=Be,x[E+2]=$e??Ne??0,!H){x[E+3]=255;continue}let He=Math.round((H?.data[E]+H?.data[E+1]+H?.data[E+2])/3);x[E+3]=He||255}d.putImageData(new ImageData(x,m,u),0,0);let Pe=i?.canvas,Le=l?.canvas,je=s?.canvas,Se=Pe?.getContext("2d"),De=Le?.getContext("2d"),ke=je?.getContext("2d"),ee=Se?.getImageData(0,0,m,u),Re=De?.getImageData(0,0,m,u),Ae=ke?.getImageData(0,0,m,u);for(let E=0;E<v.length;E+=4)v[E]=ee?.data[E]??0,v[E+1]=ee?.data[E+1]??0,v[E+2]=Re?.data[E+2]??255,v[E+3]=Ae?.data[E+3]||255;return c.putImageData(new ImageData(v,m,u),0,0),{specular:b,normalMap:f}}decodeLabPbrNormal(a){let e=a.img.width??16,r=a.img.height??16,n=a.canvas.getContext("2d");if(!n)return{};let i=document.createElement("canvas");i.width=e,i.height=r;let s=document.createElement("canvas");s.width=e,s.height=r;let l=document.createElement("canvas");l.width=e,l.height=r;let p=i.getContext("2d"),h=s.getContext("2d"),m=l.getContext("2d"),{data:u}=n.getImageData(0,0,e,r);if(!u||!p||!h||!m)return{};let b=new Uint8ClampedArray(e*r*4),d=new Uint8ClampedArray(e*r*4),f=new Uint8ClampedArray(e*r*4);for(let c=0;c<u.length;c+=4){let x=c+1,v=c+2,_=c+3;b[c]=u[v],b[x]=u[v],b[v]=u[v],b[_]=255,d[c]=u[c],d[x]=u[x],d[v]=255,d[_]=255,f[c]=u[_],f[x]=u[_],f[v]=u[_],f[_]=255}return p.putImageData(new ImageData(b,e,r),0,0),h.putImageData(new ImageData(d,e,r),0,0),m.putImageData(new ImageData(f,e,r),0,0),{ao:i,normal:s,heightmap:l}}decodeLabPbrSpecular(a){let e=a.img.width??16,r=a.img.height??16,n=a.canvas.getContext("2d");if(!n)return{};let i=document.createElement("canvas");i.width=e,i.height=r;let s=document.createElement("canvas");s.width=e,s.height=r;let l=document.createElement("canvas");l.width=e,l.height=r;let p=document.createElement("canvas");p.width=e,p.height=r;let h=document.createElement("canvas");h.width=e,h.height=r;let m=i.getContext("2d"),u=s.getContext("2d"),b=l.getContext("2d"),d=p.getContext("2d"),f=h.getContext("2d"),{data:c}=n.getImageData(0,0,e,r);if(!c||!m||!u||!b||!d||!f)return{};let x=new Uint8ClampedArray(e*r*4),v=new Uint8ClampedArray(e*r*4),_=new Uint8ClampedArray(e*r*4),y=new Uint8ClampedArray(e*r*4),k=new Uint8ClampedArray(e*r*4);for(let T=0;T<c.length;T+=4){let L=T+1,C=T+2,j=T+3;_[T]=255-c[T],_[L]=255-c[T],_[C]=255-c[T],_[j]=255,x[T]=c[L],x[L]=c[L],x[C]=c[L],x[j]=255,v[T]=c[j],v[L]=c[j],v[C]=c[j],v[j]=255,y[T]=0,y[L]=0,y[C]=0,y[j]=255,k[T]=c[C],k[L]=c[C],k[C]=c[C],k[j]=255,c[C]<65&&(y[T]=c[C],y[L]=c[C],y[C]=c[C],y[j]=255,k[T]=0,k[L]=0,k[C]=0,k[j]=255)}return m.putImageData(new ImageData(x,e,r),0,0),u.putImageData(new ImageData(v,e,r),0,0),b.putImageData(new ImageData(_,e,r),0,0),d.putImageData(new ImageData(y,e,r),0,0),f.putImageData(new ImageData(k,e,r),0,0),{metalness:i,emissive:s,roughness:l,sss:p,porosity:h}}createTexturesFromSpecular(a){let e=this.decodeLabPbrSpecular(a);return Object.entries(e).forEach(([r,n])=>{n&&new Texture({name:`${a.name}_${r}`,saved:!1,particle:!1,keep_size:!1}).fromDataURL(n.toDataURL()).add()}),e}createTexturesFromNormal(a){let e=this.decodeLabPbrNormal(a);return Object.entries(e).forEach(([r,n])=>{n&&new Texture({name:`${a.name}_${r}`,saved:!1,particle:!1,keep_size:!1}).fromDataURL(n.toDataURL()).add()}),e}};var O=class{constructor({lightHeight:a=.66,ambientLight:e=[.1,.1,.1],minLightIntensity:r=0,lightDiffuse:n=[1,1,1]}={}){this.lightHeight=a,this.ambientLight=e,this.minLightIntensity=r,this.lightDiffuse=n}bake(a,e,r){let n=e instanceof HTMLCanvasElement?e:this.createCanvas(e.width,e.height),i=r instanceof HTMLCanvasElement?r:this.createCanvas(r.width,r.height),s=n.getContext("2d"),l=i.getContext("2d");s.drawImage(e,0,0),l.drawImage(r,0,0);let p=s.getImageData(0,0,e.width,e.height),h=l.getImageData(0,0,r.width,r.height),m=[],u=[];for(let d=0;d<h.width;++d){u[d]=[];for(let f=0;f<h.height;++f){let c=(d+f*h.width)*4,x=[(h.data[c+0]/255-.5)*2,(h.data[c+1]/255-.5)*2,(h.data[c+2]/255-.5)*2],v=Math.sqrt(x[0]**2+x[1]**2+x[2]**2);u[d][f]=[x[0]/v,x[1]/v,x[2]/v]}}let b=d=>{let f=this.createCanvas(e.width,e.height),c=f.getContext("2d"),x=c.getImageData(0,0,f.width,f.height),v=[Math.cos(d),Math.sin(d),this.lightHeight];for(let _=0;_<h.width;++_)for(let y=0;y<h.height;++y){let k=u[_][y],T=(_+y*h.width)*4,L=[p.data[T+0]/255,p.data[T+1]/255,p.data[T+2]/255,p.data[T+3]],C=k[0]*v[0]+k[1]*v[1]+k[2]*v[2];C=Math.min(1,Math.max(this.minLightIntensity,C));let j=[C*L[0]*this.lightDiffuse[0]+this.ambientLight[0],C*L[1]*this.lightDiffuse[1]+this.ambientLight[1],C*L[2]*this.lightDiffuse[2]+this.ambientLight[2],L[3]];x.data[T+0]=Math.floor(j[0]*255),x.data[T+1]=Math.floor(j[1]*255),x.data[T+2]=Math.floor(j[2]*255),x.data[T+3]=j[3]}return c.putImageData(x,0,0),f};for(let d=0;d<a;++d){let f=Math.PI*2/a*d;m.push(b(f))}return m}createCanvas(a,e){let r=document.createElement("canvas");return r.width=a,r.height=e,r}};var oe=(t,a=8,e=!1)=>{if(!Project)return;let r=Project.selected_texture??Texture.getDefault(),n=new D(r.layers_enabled?r.layers:Project.textures,r.uuid),i=n.findTexture(g.albedo);if(!i){Blockbench.showStatusMessage("Can not bake without a base color assigned.",3e3);return}let s=n.findTexture(g.normal);if(!s){Blockbench.showStatusMessage("Can not bake without a normal map assigned.",3e3);return}let p=new O(t).bake(a,i.canvas,s.canvas),h=new Texture({name:`${i.name}_baked`,saved:!1,particle:!1,keep_size:!1,layers_enabled:!0}).fromDataURL(p[0].toDataURL()),m=e?u=>{let b=n.findTexture(g.emissive);if(!b)return u;let d=b.canvas;if(!d.getContext("2d"))return u;let c=Math.max(u.width,d.width,Project?Project.texture_width:16),x=Math.max(u.height,d.height,Project?Project.texture_height:16),v=document.createElement("canvas");v.width=c,v.height=x;let _=v.getContext("2d");return _?(_.drawImage(u,0,0),_.globalCompositeOperation="screen",_.drawImage(d,0,0),v):u}:u=>u;p.forEach((u,b)=>{new TextureLayer({name:`baked_${b+1}`,data_url:m(u).toDataURL()},h).addForEditing()}),h.add().select(),Blockbench.showQuickMessage("Textures baked \u{1F950}",2e3)};w.push(()=>{o.bakeTexturesDialog=new Dialog("bake_textures",{id:"bake_textures",title:"Bake Textures",buttons:["Bake","Cancel"],form:{ambientLight:{type:"color",label:"Ambient Light",value:"#1f1f1f"},lightDiffuse:{type:"color",label:"Light Diffuse",value:"#ffffff"},lightHeight:{type:"range",label:"Light Height",min:0,max:1,step:.01,value:.66},minLightIntensity:{type:"range",label:"Minimum Light Intensity",min:0,max:1,step:.01,value:0},directions:{type:"number",label:"Directions",value:8,min:1,max:360,step:1},blendEmissive:{type:"checkbox",label:"Blend Emissive",value:!1}},onConfirm(t){let a=new M.Color(t.ambientLight.toString()),e=new M.Color(t.lightDiffuse.toString());oe({ambientLight:[a.r,a.g,a.b],lightDiffuse:[e.r,e.g,e.b],lightHeight:Number(t.lightHeight),minLightIntensity:Number(t.minLightIntensity)},t.directions??8,t.blendEmissive??!1)}}),o.bakeTexturesAction=new Action("bake_textures",{icon:"cake",name:"Bake Textures",description:"Bakes textures for the selected PBR material",click(){o.bakeTexturesDialog?.show()}}),MenuBar.addAction(o.bakeTexturesAction,"tools")});P.push(()=>{MenuBar.removeAction("tools.bake_textures")});function ie(t,a){let e=t.getTexture();if(!e||!Project)return null;let r=Project.materials[e.uuid];r.isShaderMaterial&&!Project.bb_materials[e.uuid]?Project.bb_materials[e.uuid]=r:r.isMeshStandardMaterial&&r.dispose();let n=new D(e.layers_enabled?e.layers.filter(i=>i.visible)??null:Project.textures,e.uuid).getMaterial({side:Canvas.getRenderSide(e),...a});return Project.materials[e.uuid]=M.ShaderMaterial.prototype.copy.call(n,r),e}function le(t){return Object.values(t).filter(a=>a?(Canvas.updateAllFaces(a),!0):!1).length>0}function Ue(t,a){let e={};return t.forAllFaces(r=>{let n=ie(r,a);n&&(e[n.uuid]=n)}),le(e)}function Oe(t,a){let e={};return Object.keys(t.faces).forEach(r=>{let n=t.faces[r],i=ie(n,a);i&&(e[i.uuid]=i)}),le(e)}var R=(t={})=>{Project&&(Project.pbr_active=Texture.all.length>0&&Project.elements.map(a=>a instanceof Mesh&&Ue(a,t)||a instanceof Cube&&Oe(a,t)).filter(Boolean).length>0)},B=(t=100)=>se(R,t);var W={},Z={};w.push(()=>{Object.entries(g).forEach(([t,a])=>{W[t]=new Action(`assign_channel_${t}`,{icon:a.icon??"tv_options_edit_channels",name:`Assign to ${a.label.toLocaleLowerCase()} channel`,description:`Assign the selected layer to the ${a.label} channel`,category:"textures",condition:{selected:{texture:!0},project:!0,method(){return S()?.material===!0&&N()!==null}},click(){let e=TextureLayer.selected??(Project?Project.selected_texture:null);if(!e)return;Undo.initEdit({layers:[e]}),e.extend({channel:a.id});let r=e instanceof TextureLayer?e.texture:e;r.updateChangesAfterEdit(),Project.pbr_materials[r.uuid]||(Project.pbr_materials[r.uuid]={}),Object.entries(Project.pbr_materials[r.uuid]).forEach(([n,i])=>{i===e.uuid&&(delete Project.pbr_materials[r.uuid][n],e.channel=A)}),r.uuid===e.uuid&&(Project.pbr_materials[r.uuid]={}),Project.pbr_materials[r.uuid][t]=e.uuid,Undo.finishEdit("Change channel assignment"),Blockbench.showQuickMessage(`Assigned "${e.name}" to ${a.label} channel`,2e3),R()}}),Z[t]=new Action(`select_channel_${t}`,{icon:a.icon??"tv_options_edit_channels",name:a.label??t,description:`Select the ${a.label} channel`,condition:{project:!0,selected:{texture:!0},modes:["paint"],method(){let e=S();return(e?.layers_enabled?e.layers:Texture.all).some(n=>n.channel===t)}},click(){let e=Texture.selected?.layers_enabled?Texture.selected.layers:Texture.all;if(!e||!e.length)return;let r=e.find(n=>n.channel===t);r&&(r.select(),r.scrollTo())}}),Z[t].addLabel(!0,()=>a.label??t)})});P.push(()=>{[...Object.values(W),...Object.values(Z)].forEach(a=>{a.delete()})});w.push(()=>{o.unassignChannel=new Action("unassign_channel",{icon:"cancel",name:"Unassign Channel",description:"Unassign the selected layer from the channel",category:"textures",condition:{selected:{texture:!0},method(){let t=TextureLayer.selected??(Project?Project.selected_texture:null);return t?.channel&&t.channel!==A}},click(){let t=TextureLayer.selected??(Project?Project.selected_texture:null);if(!t)return;Undo.initEdit({layers:[t]});let a=t instanceof TextureLayer?t.texture:t,e=t.channel;Project.pbr_materials[a.uuid]={},t.channel=A,a.updateChangesAfterEdit(),Undo.finishEdit("Unassign channel"),Blockbench.showQuickMessage(`Unassigned "${t.name}" from ${e} channel`,2e3),B()}}),o.channelMenu=new Menu("channel_menu",[...Object.keys(g).map(t=>`assign_channel_${t}`),"unassign_channel"],{onOpen(){B()}}),o.channelSelectionMenu=new Menu("channel_selection_menu",Object.keys(g).map(t=>`select_channel_${t}`)),o.openChannelMenu=new Action("pbr_channel_menu",{name:"Assign to PBR Channel",icon:"texture",condition:{modes:["edit","paint"],selected:{texture:!0}},click(t){o.channelMenu?.open(t)},children:[...Object.values(W),o.unassignChannel]}),o.showChannelMenu=new Action("show_channel_menu",{icon:"texture",name:"Assign to PBR Channel",description:"Assign the selected layer to a channel",category:"textures",condition:{modes:["paint"],selected:{texture:!0}},click(t){o.channelMenu?.open(t)}}),o.showChannelSelectionMenu=new Action("show_channel_select_menu",{icon:"tv_options_edit_channels",name:"Select PBR Channel",description:"Select a channel to view",category:"textures",condition:{modes:["paint"],selected:{texture:!0}},click(t){o.channelSelectionMenu?.open(t)}}),o.openChannelMenu&&(MenuBar.addAction(o.openChannelMenu,"image.0"),Texture.prototype.menu.addAction(o.openChannelMenu,"0"),TextureLayer.prototype.menu.addAction(o.openChannelMenu,"0")),Toolbars.layers.add(o.showChannelMenu,1)});P.push(()=>{MenuBar.removeAction("image.pbr_channel_menu"),Texture.prototype.menu.removeAction("pbr_channel_menu"),TextureLayer.prototype.menu.removeAction("pbr_channel_menu"),Toolbars.layers.remove(o.showChannelMenu)});function q(t,a=!1){let e=t.canvas.getContext("2d");if(!e)return null;let r=Math.max(t.img.width??t.canvas.width,Project?Project.texture_width:0,16),n=Math.max(t.img.height??t.canvas.height,Project?Project.texture_height:0,16),{data:i}=e.getImageData(0,0,r,n),s=document.createElement("canvas"),l=s.getContext("2d");if(!l)return null;let p=(c,x)=>{let v=(c+x*r)*4;return i[v]/255};s.width=r,s.height=n,l.drawImage(t.img,0,0,r,n);let h=l.getImageData(0,0,r,n),m=h.data,u=c=>{let x=Math.sqrt(c[0]*c[0]+c[1]*c[1]+c[2]*c[2]);return[c[0]/x,c[1]/x,c[2]/x]};for(let c=0;c<n;c++)for(let x=0;x<r;x++){let v=p(Math.max(x-1,0),c),_=p(Math.min(x+1,r-1),c),y=p(x,Math.max(c-1,0)),k=p(x,Math.min(c+1,n-1)),T=_-v,L=k-y,C=u([-T,-L,1]),j=(c*r+x)*4;m[j]=(C[0]+1)/2*255,m[j+1]=(C[1]+1)/2*255,m[j+2]=(C[2]+1)/2*255,m[j+3]=a?p(x,c)*255:255}l.putImageData(h,0,0);let b=s.toDataURL(),d=`${t.name.replace(/_height(map)?/i,"")}_normal`;if(t instanceof TextureLayer){let c=new TextureLayer({name:d,data_url:b,visible:!0},t.texture);return c.addForEditing(),c}let f=new Texture({name:d,saved:!1,particle:!1}).fromDataURL(b);return Project&&f.add(),f}function ce(t){let a=t.canvas.getContext("2d");if(!a)return null;let e=Math.max(t.img.width??t.canvas.width,Project?Project.texture_width:0,16),r=Math.max(t.img.height??t.canvas.height,Project?Project.texture_height:0,16),{data:n}=a.getImageData(0,0,e,r),i=document.createElement("canvas"),s=i.getContext("2d");if(!s)return null;let l=(d,f)=>{let c=(d+f*e)*4;return n[c]/255};i.width=e,i.height=r,s.drawImage(t.img,0,0,e,r);let p=s.getImageData(0,0,e,r),h=p.data;for(let d=0;d<r;d++)for(let f=0;f<e;f++){let c=l(Math.max(f-1,0),d),x=l(Math.min(f+1,e-1),d),v=l(f,Math.max(d-1,0)),_=l(f,Math.min(d+1,r-1)),y=x-c,k=_-v,T=Math.sqrt(y*y+k*k)*255,L=(d*e+f)*4;h[L]=T,h[L+1]=T,h[L+2]=T,h[L+3]=255}s.putImageData(p,0,0);let m=i.toDataURL(),u=`${t.name.replace(/_height(map)?/i,"")}_ao`;if(t instanceof TextureLayer){let d=new TextureLayer({name:u,data_url:m,visible:!0},t.texture);return d.addForEditing(),d}let b=new Texture({name:u,saved:!1,particle:!1,keep_size:!1}).fromDataURL(m);return Project&&b.add(),b}w.push(()=>{o.generateNormal=new Action("generate_normal",{icon:g.normal.icon??"altitude",name:"Generate Normal Map",description:"Generates a normal map from the height map",condition:()=>(N()??S())!==null,click(t){let a=N()??S()??Texture.getDefault();if(!a)return;let e=q(a);if(!e){Blockbench.showQuickMessage("Failed to generate normal map",2e3);return}e.select(t),new D(a instanceof Texture&&a.layers_enabled?a.layers:null,a.uuid).saveTexture(g.normal,e),Blockbench.showQuickMessage("Normal map generated",2e3)}}),o.generateAo=new Action("generate_ao",{icon:g.ao.icon??"motion_mode",name:"Generate Ambient Occlusion Map",description:"Generates an ambient occlusion map from the height map",condition:{selected:{texture:!0},project:!0},click(){let t=N()??S()??Texture.getDefault();if(!t)return;let a=new D(t instanceof Texture&&t.layers_enabled?t.layers:null,t.uuid),e=a.findTexture(g.normal)??q(t);if(!e){Blockbench.showQuickMessage("Unable to generate ambient occlusion map without a normal map",2e3);return}let r=ce(e);if(r){a.saveTexture(g.ao,r),r.select(),Blockbench.showQuickMessage("Ambient occlusion map generated",2e3);return}Blockbench.showQuickMessage("Failed to generate ambient occlusion map",2e3)}}),MenuBar.addAction(o.generateNormal,"tools"),MenuBar.addAction(o.generateAo,"tools")});P.push(()=>{MenuBar.removeAction("tools.generate_normal")});var Fe=(t,a="texture")=>{t.toBlob(async e=>{e&&Blockbench.export({content:await e.arrayBuffer(),type:"PNG",name:`${a}_n`,extensions:["png"],resource_id:"normal_map",savetype:"image"})})},ze=(t,a="texture")=>{t.toBlob(async e=>{e&&Blockbench.export({content:await e.arrayBuffer(),type:"PNG",name:`${a}_s`,extensions:["png"],resource_id:"specular_map",savetype:"image"})})};w.push(()=>{o.generateLabPbr=new Action("generate_lab_pbr",{icon:"experiment",name:"Generate labPBR textures",description:"Generate a specular and normal map in labPBR format for Java shaders",condition:{formats:["java_block"],project:!0},async click(){let t=S();if(!t)return;let e=new D(t.layers_enabled?t.layers:[t],t.uuid).createLabPbrOutput();if(e===null)return;let r=t.name??(Project?Project.getDisplayName():"texture");await Promise.all([Fe(e.normalMap,pathToName(r)),ze(e.specular,pathToName(r))]),Blockbench.showQuickMessage("Exported labPBR textures")}}),o.decodeLabPbr=new Action("decode_lab_pbr",{icon:"frame_source",name:"Decode labPBR textures",description:"Decodes the selected texture into a specular or normal map in labPBR format",condition:{formats:["java"],project:!0,selected:{texture:!0}},click(){let t=TextureLayer.selected?.texture??Texture.all.find(e=>e.selected)??Texture.getDefault(),a=new D(t.layers_enabled?t.layers:[t],t.uuid);if(pathToName(t.name).endsWith("_n")){a.createTexturesFromNormal(t);return}if(pathToName(t.name).endsWith("_s")){a.createTexturesFromSpecular(t);return}Blockbench.showQuickMessage("Failed to decode labPBR texture")}}),MenuBar.addAction(o.generateLabPbr,"file.export"),MenuBar.addAction(o.decodeLabPbr,"tools")});P.push(()=>{MenuBar.removeAction("file.export.generate_lab_pbr")});w.push(()=>{o.createMaterialTexture=new Action("create_material_texture",{icon:"deployed_code",name:"Create Material Texture",description:"Creates a new texture for a PBR material",condition:{modes:["edit","paint"],project:!0},click(){if(!Project)return;let t={...g},a=new Texture({name:"New Material",saved:!1,particle:!1});a.extend({material:!0});let e=Texture.all.filter(s=>s.selected||s.multi_selected)??Texture.all,r=S(),n=r?new D(e,r.uuid):null;try{let s=n?.findTexture(g.albedo,!0)?.canvas.toDataURL()??r?.canvas.toDataURL()??J(new M.Color(8421504),a.canvas);if(!s)return;a.fromDataURL(s);let l=new TextureLayer({name:t.albedo.label,visible:!0,data_url:s,keep_size:!0},a);l.extend({channel:t.albedo.id}),l.addForEditing(),l.texture.updateChangesAfterEdit(),n?.saveTexture(t.albedo,l),delete t.albedo}catch(s){console.warn("Failed to create base color texture",s),Blockbench.showStatusMessage("Failed to create base color texture in new material",3e3)}let i=Object.keys(t).map(s=>{let l=g[s],p=n?.findTexture(l,!0),h=p?p.canvas.toDataURL():J(l.default??new M.Color(0));if(!h)return;let m=new TextureLayer({name:l.label,visible:!0,data_url:h,keep_size:!0},a);return m.extend({channel:l.id}),n?.saveTexture(l,m),m}).filter(Boolean);Undo.initEdit({textures:Texture.all,layers:i}),a.add().select(),a.activateLayers(),i.map(s=>{s.addForEditing(),a.width=Math.max(a.width,s.img.width),a.height=Math.max(a.height,s.img.height)}),a.updateChangesAfterEdit(),Undo.finishEdit("Create Material Texture")}}),MenuBar.addAction(o.createMaterialTexture,"tools"),Toolbars.texturelist.add(o.createMaterialTexture,3)});P.push(()=>{MenuBar.removeAction("tools.create_material_texture"),Toolbars.texturelist.remove("create_material_texture")});var F=(t,a)=>{let e=S()??Texture.getDefault(),r=new D(e.layers_enabled?e.layers:Project?Project.textures:null,e.uuid).createMer(!0);if(!r)throw new Error("Failed to generate MER map from selected texture.");r.toBlob(async n=>{if(!n)throw new Error("Failed to save MER map.");let[i,s]=Project?[t?`${t}_mer`:`${e.name??Project.getDisplayName()}_mer`,Project.export_path]:["mer"];Blockbench.export({content:await n.arrayBuffer(),type:"PNG",name:i,extensions:["png"],resource_id:"mer",savetype:"image",startpath:s},a)})};w.push(()=>{o.generateMer=new Action("create_mer",{icon:"lightbulb_circle",name:"Export MER",description:"Exports a texture map from the metalness, emissive, and roughness channels. (For use in Bedrock resource packs.)",condition:{formats:["bedrock","bedrock_block"],project:!0},click(){try{F()}catch(t){console.error("Failed to export MER map:",t),Blockbench.showStatusMessage("Failed to export MER map",3e3)}}}),o.decodeMer=new Action("decode_mer",{name:"Decode MER",icon:"arrow_split",condition:{formats:["bedrock","bedrock_block"],project:!0,selected:{texture:!0}},children:[{icon:"move_item",name:"Decode MER to Textures",description:"Decodes a MER texture map into metalness, emissive, and roughness channels into separate textures",click(){let t=S()??Texture.getDefault(),a=new D([t],t.uuid),e=a.decodeMer(),r=[g.metalness,g.emissive,g.roughness];Undo.initEdit({textures:[t]}),r.forEach(n=>{let i=n.id,s=e[i];if(!s){Blockbench.showStatusMessage(`Failed to decode ${n.label} channel`,3e3);return}let l=new Texture({name:`${t?.name}_${i}`,keep_size:!1}).fromDataURL(s.toDataURL());l.add(!0),a.saveTexture(n,l)}),Undo.finishEdit("Decode MER to textures")}},{icon:"move_group",name:"Decode MER to Layers",description:"Decodes a MER texture map into metalness, emissive, and roughness channels into material layers",condition:()=>S()?.layers_enabled===!0,click(){let t=S()??Texture.getDefault(),a=new D(t.layers_enabled?t.layers:[t],t.uuid),e=a.decodeMer(),r=[g.metalness,g.emissive,g.roughness];Undo.initEdit({textures:[t]}),r.forEach(n=>{let i=n.id,s=e[i];if(!s){Blockbench.showStatusMessage(`Failed to decode ${n.label} channel`,3e3);return}let l=new TextureLayer({name:`${t?.name}_${i}`,data_url:s.toDataURL()},t);a.saveTexture(n,l),l.addForEditing()}),Undo.finishEdit("Decode MER to layers")}}],click(){}}),MenuBar.addAction(o.decodeMer,"tools"),MenuBar.addAction(o.generateMer,"file.export")});P.push(()=>{MenuBar.removeAction("file.export.create_mer"),MenuBar.removeAction("tools.decode_mer")});var Ge=()=>{Project&&Project.textures.forEach(t=>{let a=new D(null,t.uuid),e=a.findTexture(g.normal,!1),r=a.findTexture(g.height,!1),n=a.findTexture(g.albedo,!1),i=a.findTexture(g.metalness,!1)?.name,s=a.findTexture(g.emissive,!1)?.name,l=a.findTexture(g.roughness,!1)?.name,p={};return n||(p.baseColor={type:"color",label:"Base Color",value:"#ff00ff"}),!i&&!s&&!l&&(p.metalness={label:"Metalness",type:"range",min:0,max:255,step:1,value:0},p.emissive={label:"Emissive",type:"range",min:0,max:255,step:1,value:0},p.roughness={label:"Roughness",type:"range",min:0,max:255,step:1,value:0}),e&&(p.depthMap={type:"checkbox",label:"Normal Map",value:"normal"}),r&&(p.depthMap={type:"checkbox",label:"Height Map",value:"heightmap"}),e&&r&&(p.depthMap={type:"radio",label:"Depth Map",options:{normal:"Normal Map",heightmap:"Height"},value:"normal"}),o.textureSetDialog=new Dialog("texture_set",{id:"texture_set",title:"Create Texture Set JSON",buttons:["Create","Cancel"],form:p,cancelIndex:1,onConfirm(h){let m=I(),u=i||s||l,b={format_version:"1.16.100","minecraft:texture_set":{color:(n?m:h.baseColor?.toHexString())??m,metalness_emissive_roughness:[h.metalness??0,h.emissive??0,h.roughness??255]}};h.depthMap==="normal"&&e||!r&&e?b["minecraft:texture_set"].normal=`${m}_normal`:(!e||h.depthMap==="heightmap")&&r&&(b["minecraft:texture_set"].heightmap=`${m}_heightmap`);let d=x=>{if(!h.depthMap)return x();let v=h.depthMap==="normal"||h.depthMap&&!r,_=v?e:r;if(!_)return x();Blockbench.export({content:_.canvas.toDataURL()??"",type:"PNG",name:`${m}_${v?"normal":"heightmap"}`,extensions:["png"],resource_id:h.depthMap,startpath:Project.export_path,savetype:"image"},y=>{b["minecraft:texture_set"][v?"normal":"heightmap"]=pathToName(y,!1),x()})},f=x=>{if(!n)return x();Blockbench.export({content:n.canvas.toDataURL(),extensions:["png"],type:"PNG",name:m,startpath:Project.export_path,savetype:"image"},v=>{b["minecraft:texture_set"].color=pathToName(v,!1),x()})},c=()=>d(()=>{f(()=>{Blockbench.export({content:JSON.stringify(b,null,2),type:"JSON",name:`${m}.texture_set`,extensions:["json"],resource_id:"texture_set",startpath:Project.export_path,savetype:"text"},()=>{Blockbench.showQuickMessage("Texture set created",2e3),o.textureSetDialog?.hide()})})});if(u){try{F(m,x=>{b["minecraft:texture_set"].metalness_emissive_roughness=pathToName(x,!1),c()})}catch(x){console.warn("Failed to export MER map:",x),Blockbench.showStatusMessage("Failed to export MER map",3e3)}return}c()}}),o.textureSetDialog.show()})};w.push(()=>{o.createTextureSet=new Action("create_texture_set",{name:"Create Texture Set",icon:"layers",description:"Creates a texture set JSON file. Generates a MER when metalness, emissive, or roughness channels are set.",click(){Ge()},condition:{formats:["bedrock","bedrock_block"],project:!0}}),MenuBar.addAction(o.createTextureSet,"file.export")});P.push(()=>{MenuBar.removeAction("file.export.create_texture_set")});w.push(()=>{o.toggleCorrectLights=new Toggle("correct_lights",{category:"preview",name:"Correct Lights",description:"Corrects the lighting in the preview",icon:"fluorescent",default:!1,onChange(t){Preview.all.forEach(a=>{a.renderer.physicallyCorrectLights=t}),Preview.selected.renderer.physicallyCorrectLights=t,Blockbench.showQuickMessage(`Physically corrected lighting is now ${t?"enabled":"disabled"}`,2e3),t&&o.togglePbr?.set(!0),R()},click(){}}),MenuBar.addAction(o.toggleCorrectLights,"preview")});P.push(()=>{MenuBar.removeAction("preview.correct_lights")});var z=()=>{!Project||!Project.bb_materials||(Project.elements.forEach(t=>{t instanceof Cube&&Object.keys(t.faces).forEach(a=>{let r=t.faces[a].getTexture();if(!r)return;let n=Project.bb_materials[r.uuid];n&&(Project.materials[r.uuid]=n)})}),Project.pbr_active=!1,Canvas.updateAll())};var ue=["undo","redo","add_texture","finish_edit","finished_edit","load_project","select_preview_scene","change_texture_path","select_project","load_undo_save","add_cube"],me=()=>Project&&Project.pbr_active&&R(),Ve=()=>{Blockbench.on(ue.join(" "),me)},de=()=>{ue.forEach(t=>{Blockbench.removeListener(t,me)})};w.push(()=>{o.togglePbr=new Toggle("toggle_pbr",{name:"PBR Preview",description:"Toggle PBR Preview",icon:"panorama_photosphere",category:"view",default:!1,click(){},onChange(t){if(t){R(),Ve(),Blockbench.showQuickMessage("PBR Preview is now enabled");return}z(),de(),Blockbench.showQuickMessage("PBR Preview is now disabled")}}),MenuBar.addAction(o.togglePbr,"view")});P.push(()=>{de(),MenuBar.removeAction("view.toggle_pbr")});var he=t=>{let a=Math.max(-2,Math.min(2,t));Preview.all.forEach(e=>{e.renderer.toneMappingExposure=a}),Preview.selected.renderer.toneMappingExposure=a};w.push(()=>{o.exposureSlider=new NumSlider("display_settings_exposure",{category:"preview",name:"Exposure",description:"Adjusts the exposure of the scene",type:"number",value:1,icon:"exposure",settings:{min:-2,max:2,step:.01,default:1},onBefore(){Number(o.tonemappingSelect?.get())===M.NoToneMapping&&o.tonemappingSelect.change(M.LinearToneMapping.toString()),o.togglePbr?.set(!0)},onChange(t){he(Number(t))},onAfter(){B()}}),o.resetExposureButton=new Action("display_settings_reset_exposure",{category:"preview",name:"Reset Exposure",description:"Resets the exposure of the scene",icon:"exposure_plus_1",condition:()=>o.exposureSlider!==void 0&&Number(o.exposureSlider?.get())!==1,click(){he(1),o.exposureSlider?.setValue(1,!0),B()}}),o.tonemappingSelect=new BarSelect("display_settings_tone_mapping",{category:"preview",name:"Tone Mapping",description:"Changes the tone mapping of the preview",type:"select",default_value:M.NoToneMapping,value:Preview.selected.renderer.toneMapping??M.NoToneMapping,icon:"monochrome_photos",options:{[M.NoToneMapping]:"No Tone Mapping",[M.LinearToneMapping]:"Linear",[M.ReinhardToneMapping]:"Reinhard",[M.CineonToneMapping]:"Cineon",[M.NeutralToneMapping]:"Neutral",[M.ACESFilmicToneMapping]:"ACES"},onChange({value:t}){Preview.selected.renderer.toneMapping=Number(t);let a=1;Preview.selected.renderer.toneMapping===M.NoToneMapping?o.exposureSlider?.setValue(a,!0):a=Number(o.exposureSlider?.get()??1),Preview.all.forEach(e=>{e.renderer.toneMapping=Number(t),e.renderer.toneMappingExposure=a}),Preview.selected.renderer.toneMappingExposure=a,Blockbench.showQuickMessage(`Tone mapping set to ${this.getNameFor(t)}`,2e3),o.togglePbr&&!o.togglePbr.value&&o.togglePbr.set(!0),R()}})});var X=class{async parse(a){let e=new re,r="model.usda";e.file(r,"");let n=xe(),i={},s={};a.traverseVisible(h=>{if(!h.isMesh)return;let m=h;if(!m.material.isMeshStandardMaterial){console.warn("THREE.USDZExporter: Unsupported material type (USDZ only supports MeshStandardMaterial)",h);return}let u=m.geometry,b=m.material,d="geometries/Geometry_"+u.id+".usd";if(!e.file(d)){let f=qe(u);e.file(d,Je(f))}b.uuid in i||(i[b.uuid]=b),n+=Ze(m,u,b)}),n+=tt(i,s),e.file(r,n),n=null;for(let h in s){let m=s[h],u=h.split("_")[1],b=m.format===M.RGBAFormat,d=Qe(m.image,u),c=await(await new Promise(x=>d.toBlob(v=>v&&x(v),b?"image/png":"image/jpeg",1))).arrayBuffer();e.file(`textures/Texture_${h}.${b?"png":"jpg"}`,c)}let l=0;e.forEach(async h=>{let m=34+h.length;l+=m;let u=l&63,b=await e.file(h).async("uint8array");if(u!==4){let d=64-u,f=new Uint8Array(d),c=new Uint8Array(b.length+d);c.set(b,0),c.set(f,b.length),e.file(h,c)}l+=b.length});let p=await e.generateAsync({type:"blob",compression:"STORE"});return new Uint8Array(await p.arrayBuffer())}};function Qe(t,a){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&t instanceof OffscreenCanvas||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){let e=1024/Math.max(t.width,t.height),r=document.createElement("canvas");r.width=t.width*Math.min(1,e),r.height=t.height*Math.min(1,e);let n=r.getContext("2d");if(n.imageSmoothingEnabled=!1,n.drawImage(t,0,0,r.width,r.height),a!==void 0){let i=parseInt(a,16),s=(i>>16&255)/255,l=(i>>8&255)/255,p=(i&255)/255,h=n.getImageData(0,0,r.width,r.height),m=h.data;for(let u=0;u<m.length;u+=4)m[u+0]=m[u+0]*s,m[u+1]=m[u+1]*l,m[u+2]=m[u+2]*p;n.putImageData(h,0,0)}return r}throw new Error("Unsupported image type")}var $=7;function xe(){return`#usda 1.0
(
    customLayerData = {
        string creator = "Blockbench USDZExporter"
    }
    metersPerUnit = 1
    upAxis = "Y"
)

`}function Je(t){let a=xe();return a+=t,a}function Ze(t,a,e){let r="Object_"+t.id,n=We(t.matrixWorld);return t.matrixWorld.determinant()<0&&console.warn("THREE.USDZExporter: USDZ does not support negative scales",t),`def Xform "${r}" (
    prepend references = @./geometries/Geometry_${a.id}.usd@</Geometry>
)
{
    matrix4d xformOp:transform = ${n}
    uniform token[] xformOpOrder = ["xformOp:transform"]

    rel material:binding = </Materials/Material_${e.id}>
}

`}function We(t){let a=t.elements;return`( ${G(a,0)}, ${G(a,4)}, ${G(a,8)}, ${G(a,12)} )`}function G(t,a){return`(${t[a+0]}, ${t[a+1]}, ${t[a+2]}, ${t[a+3]})`}function qe(t){return`
def "Geometry"
{
  ${Xe(t)}
}
`}function Xe(t){let a="Geometry",e=t.attributes,r=e.position.count;return`
    def Mesh "${a}"
    {
        int[] faceVertexCounts = [${Ye(t)}]
        int[] faceVertexIndices = [${Ke(t)}]
        normal3f[] normals = [${pe(e.normal,r)}] (
            interpolation = "vertex"
        )
        point3f[] points = [${pe(e.position,r)}]
        float2[] primvars:st = [${et(e.uv,r)}] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }
`}function Ye(t){let a=t.index!==null?t.index.count:t.attributes.position.count;return Array(a/3).fill(3).join(", ")}function Ke(t){let a=t.index,e=[];if(a!==null)for(let r=0;r<a.count;r++)e.push(a.getX(r));else{let r=t.attributes.position.count;for(let n=0;n<r;n++)e.push(n)}return e.join(", ")}function pe(t,a){if(t===void 0)return console.warn("USDZExporter: Normals missing."),Array(a).fill("(0, 0, 0)").join(", ");let e=[];for(let r=0;r<t.count;r++){let n=t.getX(r),i=t.getY(r),s=t.getZ(r);e.push(`(${n.toPrecision($)}, ${i.toPrecision($)}, ${s.toPrecision($)})`)}return e.join(", ")}function et(t,a){if(t===void 0)return console.warn("USDZExporter: UVs missing."),Array(a).fill("(0, 0)").join(", ");let e=[];for(let r=0;r<t.count;r++){let n=t.getX(r),i=t.getY(r);e.push(`(${n.toPrecision($)}, ${Number(i.toPrecision($))})`)}return e.join(", ")}function tt(t,a){let e=[];for(let r in t){let n=t[r];e.push(at(n,a))}return`def "Materials"
{
${e.join("")}
}

`}function at(t,a){let e="            ",r=[],n=[];function i(l,p,h){let m=l.id+(h?"_"+h.getHexString():""),u=l.format===M.RGBAFormat;return a[m]=l,`
        def Shader "Transform2d_${p}" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </Materials/Material_${t.id}/uvReader_st.outputs:result>
            float2 inputs:scale = ${fe(l.repeat)}
            float2 inputs:translation = ${fe(l.offset)}
            float2 outputs:result
        }

        def Shader "Texture_${l.id}_${p}"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_${m}.${u?"png":"jpg"}@
            float2 inputs:st.connect = </Materials/Material_${t.id}/Transform2d_${p}.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
        }`}let s=t;if(s.map!==null?(r.push(`${e}color3f inputs:diffuseColor.connect = </Materials/Material_${s.id}/Texture_${s.map.id}_diffuse.outputs:rgb>`),n.push(i(s.map,"diffuse",s.color))):r.push(`${e}color3f inputs:diffuseColor = ${ge(s.color)}`),s.emissiveMap!==null?(r.push(`${e}color3f inputs:emissiveColor.connect = </Materials/Material_${s.id}/Texture_${s.emissiveMap.id}_emissive.outputs:rgb>`),n.push(i(s.emissiveMap,"emissive"))):s.emissive.getHex()>0&&r.push(`${e}color3f inputs:emissiveColor = ${ge(s.emissive)}`),s.normalMap!==null&&(r.push(`${e}normal3f inputs:normal.connect = </Materials/Material_${s.id}/Texture_${s.normalMap.id}_normal.outputs:rgb>`),n.push(i(s.normalMap,"normal"))),s.aoMap!==null&&(r.push(`${e}float inputs:occlusion.connect = </Materials/Material_${s.id}/Texture_${s.aoMap.id}_occlusion.outputs:r>`),n.push(i(s.aoMap,"occlusion"))),s.roughnessMap!==null&&s.roughness===1?(r.push(`${e}float inputs:roughness.connect = </Materials/Material_${s.id}/Texture_${s.roughnessMap.id}_roughness.outputs:g>`),n.push(i(s.roughnessMap,"roughness"))):r.push(`${e}float inputs:roughness = ${s.roughness}`),s.metalnessMap!==null&&s.metalness===1?(r.push(`${e}float inputs:metallic.connect = </Materials/Material_${s.id}/Texture_${s.metalnessMap.id}_metallic.outputs:b>`),n.push(i(s.metalnessMap,"metallic"))):r.push(`${e}float inputs:metallic = ${s.metalness}`),s.alphaMap!==null?(r.push(`${e}float inputs:opacity.connect = </Materials/Material_${s.id}/Texture_${s.alphaMap.id}_opacity.outputs:r>`),r.push(`${e}float inputs:opacityThreshold = 0.0001`),n.push(i(s.alphaMap,"opacity"))):r.push(`${e}float inputs:opacity = ${s.opacity}`),s.isMeshPhysicalMaterial){let l=s;r.push(`${e}float inputs:clearcoat = ${l.clearcoat}`),r.push(`${e}float inputs:clearcoatRoughness = ${l.clearcoatRoughness}`),r.push(`${e}float inputs:ior = ${l.ior}`)}return`
    def Material "Material_${s.id}"
    {
        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
${r.join(`
`)}
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }

        token outputs:surface.connect = </Materials/Material_${s.id}/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"

        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </Materials/Material_${s.id}.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }

${n.join(`
`)}

    }
`}function ge(t){return`(${t.r}, ${t.g}, ${t.b})`}function fe(t){return`(${t.x}, ${t.y})`}var be=X;w.push(()=>{let t=new Codec("usdz",{extension:"usdz",name:"USDZ",remember:!0,export_options:{},fileName(){return I()+".usdz"},async compile(a={}){if(!Project)throw new Error("No project loaded");R();let e=Object.assign(this.getExportOptions(),a),r=new be,n=new M.Scene;n.name="blockbench_export",n.add(Project.model_3d);let i=await r.parse(n);return this.dispatchEvent("compile",{model:i,options:e}),Canvas.scene.add(Project.model_3d),i},async export(){let a=await this.compile();Blockbench.export({content:a,name:this.fileName(),startpath:this.startPath(),resource_id:"usdz",type:this.name,extensions:["usdz"],savetype:"buffer"},e=>this.afterDownload(e))}});o.exportUsdz=new Action("export_usdz",{category:"file",name:"Export USDZ",description:"Exports the current model as a USDZ file",icon:"file_download",async click(){t&&await t.export()}}),o.usdz=t,MenuBar.addAction(o.exportUsdz,"file.export")});P.push(()=>{MenuBar.removeAction("file.export_usdz")});var V=class t{constructor({colors:a}){this._colors={...Object.fromEntries(Object.keys(g).map(e=>[e,g[e].default??new M.Color(4294967040)])),...a}}get colors(){return this._colors}set colors(a){this._colors={...this._colors,...a}}toString(){let a=Object.entries(this._colors).map(([e,r])=>[e,r.getHexString()]);return JSON.stringify(a)}getChannel(a){return this._colors[a]}static makeLinearColor(a){let e=Math.min(1,Math.max(0,a));return new M.Color(e,e,e).convertSRGBToLinear()}static fromSettings(){let a="#000000",e=Number(o.brushMetalnessSlider?.get()),r=Number(o.brushRoughnessSlider?.get()??1),n=(o.brushEmissiveColor?.get()??a).toString(),i=Number(o.brushHeightSlider?.get()),s=ColorPanel.get(),l={[g.albedo.id]:new M.Color(s),[g.metalness.id]:t.makeLinearColor(e),[g.roughness.id]:t.makeLinearColor(r),[g.emissive.id]:new M.Color(n??a),[g.height.id]:t.makeLinearColor(i),[g.normal.id]:g.normal.default??new M.Color("#8080ff")};return new t({colors:l})}};var Me="materialBrushPresets",Y=()=>JSON.parse(localStorage.getItem(Me)||"{}"),rt=(t,a)=>{let e=Y(),r=a??guid(),n=o.userMaterialBrushPresets?.getFormResult()??{},i={};return n.albedo&&(i.albedo=n.albedo.toString()),n.metalness&&(i.metalness=Number(n.metalness)),n.roughness&&(i.roughness=Number(n.roughness)),n.emissive&&(i.emissive=n.emissive.toString()),n.height&&(i.height=Number(n.height)),e[r]=[i,t??"New Preset",U(i)],localStorage.setItem(Me,JSON.stringify(e)),r},ve=({metalness:t,roughness:a,emissive:e,height:r,albedo:n})=>{t!==void 0&&o.brushMetalnessSlider?.setValue(t||0,!0),a!==void 0&&o.brushRoughnessSlider?.setValue(a??1,!0),e!==void 0&&o.brushEmissiveColor?.set(e??"#000000"),r!==void 0&&o.brushHeightSlider?.setValue(Math.max(0,Math.min(1,r??.5)),!0),n!==void 0&&ColorPanel.set(n)},Q=({id:t})=>Condition({project:!0,tools:["material_brush"],method(){let a=S();return(a?.layers_enabled&&a.layers.find(({channel:e})=>e&&e===t)!==void 0)===!0}}),nt=ae.extend({name:"UserPresetsDialog",data(){return{userPresets:{},channels:g}},methods:{applyPreset(t){try{let[a,e]=this.userPresets[t],{metalness:r,roughness:n,emissive:i,height:s,albedo:l}=a;ve({metalness:Number(r),roughness:Number(n),emissive:i.toString(),height:Number(s),albedo:l.toString()}),o.userMaterialBrushPresets?.hide(),Blockbench.showQuickMessage(`Preset "${e}" applied`,2e3)}catch{Blockbench.showQuickMessage("Failed to apply preset",2e3)}},deletePreset(t){Blockbench.showMessageBox({title:"Delete Preset",message:"Are you sure you want to delete this preset?",confirm:1,cancel:0,buttons:["Cancel","Delete"],checkboxes:{},width:400},a=>{if(a){let e=Y(),r=this.userPresets[t][1]??t;delete e[t],localStorage.setItem("materialBrushPresets",JSON.stringify(e)),this.userPresets=e,Blockbench.showQuickMessage(`Preset "${r}" deleted`,2e3)}})},editPreset(t){o.userMaterialBrushPresets?.setFormValues({name:this.userPresets[t][1]??t,...this.userPresets[t][0]})},getSummary(t){return Object.entries(t).filter(([a])=>a in this.channels).map(([a,e])=>a==="albedo"||a==="emissive"?`${this.channels[a]?.label??a}: ${e}`:`${this.channels[a]?.label??a}: ${Number(e).toFixed(1)}`).join(`
`)}},computed:{presets(){return Object.entries(this.userPresets)}},mounted(){this.userPresets=Y()},template:`
    <div>
      <ul class="list mobile_scrollbar preset_list">
        <li
          v-for="([key, [settings, name, image]]) in presets"
          :key="key"
          class="user_preset"
        >
          <div v-if="image" class="preset_preview" @click="editPreset(key)">
            <img :src="image" :alt="name" :title="getSummary(settings)" width="96" height="96" />
            <div class="preset_title">{{ name }}</div>
          </div>
          <div v-else>
            <div class="preset_title" @click="editPreset(key)" :title="getSummary(settings)">{{ name }}</div>
          </div>
          <div class="preset_buttons">
            <button class="delete_preset" type="button" @click="deletePreset(key)">
              <i class="material-icons">close</i>
            </button>
          </div>
        </li>
      </ul>
    </div>`});w.push(()=>{o.materialBrushStyles=Blockbench.addCSS(`
  .preset_list {
    display: grid;
    grid-template-columns: repeat(auto-fill, 96px);
    grid-gap: 8px;
    justify-content: start;
    align-items: start;
    margin: 0 auto;
    padding: 8px;
  }

  .user_preset {
    display: flex;
    justify-content: start;
    align-items: center;
    width: 100%;
    padding: 8px;
    position: relative;
  }

  .preset_title {
    font-size: 1em;
    color: var(--color-text);
  }

  .user_preset:hover .preset_title {
    color: var(--color-accent);
  }

  .preset_preview {
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
    justify-content: center;
    align-items: center;
    text-align: center;
  }

  .preset_buttons {
    display: flex;
    flex-direction: row;
    align-items: center;
    font-size: 0.8em;
    padding: 0 4px;
  }

  .preset_channel {
    display: flex;
    flex-direction: row;
    align-items: center;
    margin: 0 8px;
    font-size: 0.8em;
  }

  .delete_preset {
    margin-left: 8px;
    padding: 4px;
    height: 24px;
    width: 24px;
    min-width: 24px;
    background-color: transparent;
    color: var(--color-text);
    border: none;
    border-radius: 100%;
    position: absolute;
    right: -8px;
    top: 0;
    filter: drop-shadow(0 0 2px var(--color-shadow));
  }

  .delete_preset:hover {
    background: transparent;
    color: var(--color-accent);
  }

  .delete_preset .material-icons {
    font-size: 0.825em;
  }

  .delete_preset:hover .material-icons {
    color: var(--color-accent);
  }`),o.brushMetalnessSlider=new NumSlider("slider_brush_metalness",{category:"paint",name:"Metalness",description:"Adjust the metalness of the brush",tool_setting:"brush_metalness",settings:{min:0,max:1,step:.01,default:0},condition:()=>Q(g.metalness)}),o.brushRoughnessSlider=new NumSlider("slider_brush_roughness",{category:"paint",name:"Roughness",description:"Adjust the roughness of the brush",tool_setting:"brush_roughness",settings:{min:0,max:1,step:.01,default:1},condition:()=>Q(g.roughness)}),o.brushEmissiveColor=new ColorPicker("brush_emissive_color",{category:"paint",name:"Emissive",description:"Adjust the emissive color of the brush",value:"#000000",tool_setting:"brush_emissive",condition:()=>Q(g.emissive)}),o.brushHeightSlider=new NumSlider("slider_brush_height",{category:"paint",name:"Height",description:"Adjust the height of the brush",tool_setting:"brush_height",settings:{min:0,max:1,step:.01,default:.5},condition:()=>Q(g.height)}),o.materialBrushTool=new Tool("material_brush",{name:"Material Brush",description:"Paints across multiple texture layers",icon:"view_in_ar",paintTool:!0,cursor:"cell",category:"tools",toolbar:"brush",condition:{project:!0,selected:{texture:!0},modes:["paint"],method(){return S()?.layers_enabled??!1}},allowed_view_modes:"textured",tool_settings:{brush_metalness:0,brush_roughness:1,brush_emissive:"#000000",brush_height:.5},brush:{blend_modes:!1,shapes:!0,size:!0,softness:!0,opacity:!0,offset_even_radius:!0,floor_coordinates:!0,changePixel(t,a,e,r,{size:n,softness:i,texture:s,x:l,y:p}){let h=V.fromSettings(),m=Object.keys(h.colors),u=Math.floor(n-i*n/100),b=e;return s.layers.forEach(d=>{if(!d.visible||!m.includes(d.channel))return;let f=h.getChannel(d.channel);if(!f)return;let c=Math.sqrt((l-t)**2+(p-a)**2),x=Math.min(1,c/u);if(l%u<=x&&p%u<=x){let v=d.ctx.getImageData(t,a,1,1).data,_=new M.Color(`rgb(${v[0]}, ${v[1]}, ${v[2]})`);f.lerp(_,1)}d.ctx.fillStyle=f.getStyle(),d.ctx.fillRect(t,a,1,1),d.selected&&(b={r:f.r*255,g:f.g*255,b:f.b*255,a:r*255})}),b}},onCanvasClick(t){Painter.startPaintToolCanvas(t,t.event)},onSelect(){Painter.updateNslideValues(),R()},click(){B()}}),o.loadBrushPreset=new Action("load_brush_preset",{icon:"stroke_full",name:"Material Brush Presets",description:"Load or save a brush preset",category:"paint",condition:{project:!0},click(){o.userMaterialBrushPresets=new Dialog("user_brush_presets",{id:"user_brush_presets",title:"Edit Material Brush",component:nt,part_order:["lines","component","form"],form:{albedo:{type:"color",label:"Albedo",value:ColorPanel.get(),toggle_enabled:!0},metalness:{type:"number",label:"Metalness",min:0,max:1,step:.01,full_width:!1,toggle_enabled:!0},roughness:{type:"number",label:"Roughness",min:0,max:1,step:.01,toggle_enabled:!0,full_width:!1},emissive:{type:"color",label:"Emissive",value:"#000000",toggle_enabled:!0},height:{type:"number",label:"Height",min:0,max:1,step:.01,toggle_enabled:!0}},onConfirm(t){ve({metalness:Number(t.metalness??o.brushMetalnessSlider?.get()),roughness:Number(t.roughness??o.brushRoughnessSlider?.get()),emissive:(t.emissive??o.brushEmissiveColor?.get()).toString(),height:Number(t.height??o.brushHeightSlider?.get()),albedo:(t.albedo??ColorPanel.get()).toString()})},buttons:["Close","Save","Apply"],cancelIndex:0,confirmIndex:2,onButton(t,a){o.materialBrushTool?.select(),t===1&&Blockbench.textPrompt("Save Preset","New Preset",e=>{e&&(rt(e),Blockbench.showQuickMessage(`Preset "${e}" saved`,2e3))})}}).show()}}),MenuBar.addAction(o.materialBrushTool,"tools.0")});P.push(()=>{MenuBar.removeAction("tools.material_brush")});w.push(()=>{o.materialBrushPanel=new Panel("material_brush_panel",{name:"Material Brush",id:"material_brush_panel",icon:"view_in_ar",toolbars:[new Toolbar("material_brush_toolbar",{id:"material_brush_toolbar",children:["material_brush","load_brush_preset","slider_brush_metalness","slider_brush_roughness","brush_emissive_color","slider_brush_height"],name:"Material Settings"})],condition:{modes:["paint"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"right",default_position:{slot:"right_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"color",insert_before:"outliner"})});w.push(()=>{o.displaySettingsPanel=new Panel("display_settings",{name:"PBR Controls",id:"display_settings_panel",icon:"display_settings",toolbars:[new Toolbar("controls_toolbar",{id:"controls_toolbar",children:["toggle_pbr","correct_lights","display_settings_tone_mapping","display_settings_exposure","display_settings_reset_exposure","show_channel_select_menu"],name:"Display Settings"})],display_condition:{modes:["edit","paint","animate"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"left",default_position:{slot:"left_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"textures",insert_before:"color"})});(()=>{let t=()=>{w.forEach(e=>e())},a=()=>{z(),P.forEach(e=>e()),Object.entries(o).forEach(([e,r])=>{try{r?.delete()}catch(n){console.warn(`Failed to delete ${e} action:`,n)}})};BBPlugin.register("pbr_preview",{version:"1.1.0",title:"PBR Tools",author:"Jason J. Gardner",description:"Create and view PBR materials in Blockbench. Export textures for Java and RenderDragon shaders.",tags:["Minecraft: Java Edition","Minecraft: Bedrock Edition","PBR"],icon:"icon.png",variant:"both",await_loading:!0,repository:"https://github.com/jasonjgardner/blockbench-plugins",has_changelog:!0,min_version:"4.10.3",onload:t,onunload:a})})();})();
