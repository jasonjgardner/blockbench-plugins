"use strict";(()=>{(()=>{let A,I,N,$,S,U,O,F,E,ee,R,te,ne,G,ae,Q,H,z,re,se,ie,oe,V,me,J,q,X,K,W,Y={},p="pbr_preview",ge="1.0.0",M="_NONE_",l={albedo:{id:"albedo",label:"Albedo",description:"The color of the material",map:"map",icon:"tonality",default:new THREE.Color(16777215)},metalness:{id:"metalness",label:"Metalness",description:"The material's metalness map",map:"metalnessMap",icon:"brightness_6",default:new THREE.Color(0)},emissive:{id:"emissive",label:"Emissive",description:"The material's emissive map",map:"emissiveMap",icon:"wb_twilight",default:new THREE.Color(0)},roughness:{id:"roughness",label:"Roughness",description:"The material's roughness map",map:"roughnessMap",icon:"grain",default:new THREE.Color(16777215)},height:{id:"height",label:"Height",description:"The material's height map",map:"bumpMap",icon:"landscape",default:new THREE.Color(16777215)},normal:{id:"normal",label:"Normal",description:"The material's normal map",map:"normalMap",icon:"looks",default:new THREE.Color("rgb(128, 128, 255)")},ao:{id:"ao",label:"Ambient Occlusion",description:"The material's ambient occlusion map",map:"aoMap",icon:"motion_mode",default:new THREE.Color(16777215)}},Z=(n=!0)=>{let e=Project?Project.textures??Texture.all:Texture.all;return n?e.filter(t=>t.layers_enabled&&t.layers.length>0).flatMap(t=>t.layers):e};class v{constructor(e,t){this._scope=e??Z(),this._materialUuid=t}merToCanvas(){let e=this.getTexture(l.emissive),t=this.getTexture(l.roughness),r=this.getTexture(l.metalness);if(!e&&!t&&!r){let{metalness:a,emissive:s,roughness:o}=this.decodeMer();a&&(r=v.makePixelatedCanvas(a)),s&&(e=v.makePixelatedCanvas(s)),o&&(t=v.makePixelatedCanvas(o))}return{emissiveMap:e,roughnessMap:t,metalnessMap:r}}getMaterial(e={}){let{emissiveMap:t,roughnessMap:r,metalnessMap:a}=this.merToCanvas(),s=new THREE.MeshStandardMaterial({map:this.getTexture(l.albedo)??v.makePixelatedCanvas(TextureLayer.selected?.canvas??Texture.all.find(i=>i.selected)?.canvas??Texture.getDefault().canvas),aoMap:this.getTexture(l.ao),bumpMap:this.getTexture(l.height),metalnessMap:a,metalness:a?1:0,roughnessMap:r,roughness:1,emissiveMap:t,emissiveIntensity:t?1:0,emissive:t?16777215:0,envMap:PreviewScene.active?.cubemap??null,envMapIntensity:1,alphaTest:.5,...e}),o=this.getTexture(l.normal);return o&&(s.normalMap=o,s.normalScale=new THREE.Vector2(1,1)),s}saveTexture(e,t){Project&&(Project.pbr_materials||(Project.pbr_materials={}),Project.pbr_materials[this._materialUuid]||(Project.pbr_materials[this._materialUuid]={}),Project.pbr_materials[this._materialUuid][e.id]=t.uuid,t.extend({channel:e.id}))}findTexture(e,t=!0){if(!Project)return null;let r=this._scope.find(i=>i.channel&&(i.channel===e||i.channel===e.id));if(r)return r;let a=typeof e=="string"?e:e.id;Project.pbr_materials??={};let s=Project.pbr_materials[this._materialUuid];if(!s&&t&&a!==M){let i=new RegExp(`_*${a}(.[^.]+)?$`,"i");return this._scope.find(f=>i.test(f.name))??null}let o=s?.[a];return o?this._scope.find(i=>i.uuid===o)??null:null}static makePixelatedCanvas(e){let t=new THREE.CanvasTexture(e,void 0,void 0,void 0,THREE.NearestFilter,THREE.NearestFilter);return t.needsUpdate=!0,t}getTexture(e){let t=this.findTexture(e);return t?v.makePixelatedCanvas(t.canvas):null}static extractChannel(e,t){let r=e.canvas,a=r.width,s=r.height,o=r.getContext("2d");if(!o||!a||!s)return null;let i=document.createElement("canvas");i.width=a,i.height=s;let f=i.getContext("2d");if(!f)return null;let h={r:0,g:1,b:2,a:3}[t],{data:g}=o.getImageData(0,0,a,s),c=new Uint8ClampedArray(a*s*4);for(let d=0;d<g.length;d+=4)c[d]=g[d+h],c[d+1]=g[d+h],c[d+2]=g[d+h],c[d+3]=255;let w=new ImageData(c,a,s);return f.putImageData(w,0,0),i}decodeMer(e=1){let t=this.findTexture("mer",!0);if(!t)return{metalness:null,emissive:null,emissiveLevel:null,roughness:null,sss:null};let r=v.extractChannel(t,"r"),a=v.extractChannel(t,"g"),s=v.extractChannel(t,"b"),o=v.extractChannel(t,"a"),i=document.createElement("canvas");i.width=t.img.width??16,i.height=t.img.height??16;let f=this.findTexture(l.albedo);f&&(i.width=f.img.width??16,i.height=f.img.height??16);let h=i.getContext("2d"),g=a?.getContext("2d"),c=f?.canvas?.getContext("2d");if(!h||!c||!g)return{metalness:r,emissive:a,roughness:s,sss:o};let w=c.getImageData(0,0,i.width,i.height),d=g.getImageData(0,0,i.width,i.height),b=new Uint8ClampedArray(i.width*i.height*4);for(let x=0;x<w.data.length;x+=4){if(d.data[x]>e){b[x]=w.data[x],b[x+1]=w.data[x+1],b[x+2]=w.data[x+2],b[x+3]=255;continue}b[x]=0,b[x+1]=0,b[x+2]=0,b[x+3]=255}return h.putImageData(new ImageData(b,i.width,i.height),0,0),{metalness:r,emissive:i,emissiveLevel:a,roughness:s,sss:o}}createMer(e=!1){let t=this.findTexture(l.metalness,e),r=this.findTexture(l.emissive,e),a=this.findTexture(l.roughness,e),s=this.findTexture("sss",!1),o=Math.max(t?.img.width??0,r?.img.width??0,a?.img.width??0,Project?Project.texture_width:0,16),i=Math.max(t?.img.height??0,r?.img.height??0,a?.img.height??0,Project?Project.texture_height:0,16),f=document.createElement("canvas");f.width=o,f.height=i;let h=f.getContext("2d");if(!h)return null;let g=t?.img?v.extractChannel(t,"r"):null,c=r?.img?v.extractChannel(r,"g"):null,w=a?.img?v.extractChannel(a,"b"):null,d=s&&s?.img?v.extractChannel(s,"a"):null,b=g?.getContext("2d")?.getImageData(0,0,o,i)??new ImageData(o,i),x=c?.getContext("2d")?.getImageData(0,0,o,i)??new ImageData(o,i),u=w?.getContext("2d")?.getImageData(0,0,o,i)??new ImageData(o,i),m=d?.getContext("2d")?.getImageData(0,0,o,i)??new ImageData(new Uint8ClampedArray(o*i*4).fill(255),o,i),_=new Uint8ClampedArray(o*i*4);for(let T=0;T<_.length;T+=4)_[T]=b.data[T],_[T+1]=x.data[T],_[T+2]=u.data[T],_[T+3]=m.data[T];return h.putImageData(new ImageData(_,o,i),0,0),f}static createNormalMap(e,t=!1){let r=e.canvas.getContext("2d");if(!r)return null;let a=Math.max(e.img.width??e.canvas.width,Project?Project.texture_width:0,16),s=Math.max(e.img.height??e.canvas.height,Project?Project.texture_height:0,16),{data:o}=r.getImageData(0,0,a,s),i=document.createElement("canvas"),f=i.getContext("2d");if(!f)return null;let h=(u,m)=>{let _=(u+m*a)*4;return o[_]/255};i.width=a,i.height=s,f.drawImage(e.img,0,0,a,s);let g=f.getImageData(0,0,a,s),c=g.data,w=u=>{let m=Math.sqrt(u[0]*u[0]+u[1]*u[1]+u[2]*u[2]);return[u[0]/m,u[1]/m,u[2]/m]};for(let u=0;u<s;u++)for(let m=0;m<a;m++){let _=h(Math.max(m-1,0),u),T=h(Math.min(m+1,a-1),u),j=h(m,Math.max(u-1,0)),P=h(m,Math.min(u+1,s-1)),D=T-_,L=P-j,C=w([-D,-L,1]),B=(u*a+m)*4;c[B]=(C[0]+1)/2*255,c[B+1]=(C[1]+1)/2*255,c[B+2]=(C[2]+1)/2*255,c[B+3]=t?h(m,u)*255:255}f.putImageData(g,0,0);let d=i.toDataURL(),b=`${e.name.replace(/_height(map)?/i,"")}_normal`;if(e instanceof TextureLayer){let u=new TextureLayer({name:b,data_url:d,visible:!0},e.texture);return u.addForEditing(),u}let x=new Texture({name:b,saved:!1,particle:!1,keep_size:!1}).fromDataURL(d);return Project&&x.add(),x}}class k{constructor({colors:e}){this._colors={...Object.fromEntries(Object.keys(l).map(t=>[t,l[t].default??new THREE.Color(4294967040)])),...e}}get colors(){return this._colors}set colors(e){this._colors={...this._colors,...e}}getChannel(e){return this._colors[e]}static makeLinearColor(e){let t=Math.min(1,Math.max(0,e));return new THREE.Color(t,t,t).convertSRGBToLinear()}static fromSettings(){let e=Number(J.get()),t=Number(q.get()),r=X.get().toString(),a=Number(K.get()),s=ColorPanel.get(),o={[l.albedo.id]:new THREE.Color(s),[l.metalness.id]:k.makeLinearColor(e),[l.roughness.id]:k.makeLinearColor(t),[l.emissive.id]:new THREE.Color(r??"#000000"),[l.height.id]:k.makeLinearColor(a),[l.normal.id]:l.normal.default??new THREE.Color("#8080ff")};return new k({colors:o})}}class pe{constructor({lightHeight:e=.66,ambientLight:t=[.1,.1,.1],minLightIntensity:r=0,lightDiffuse:a=[1,1,1]}={}){this.lightHeight=e,this.ambientLight=t,this.minLightIntensity=r,this.lightDiffuse=a}bake(e,t,r){let a=t instanceof HTMLCanvasElement?t:this.createCanvas(t.width,t.height),s=r instanceof HTMLCanvasElement?r:this.createCanvas(r.width,r.height),o=a.getContext("2d"),i=s.getContext("2d");o.drawImage(t,0,0),i.drawImage(r,0,0);let f=o.getImageData(0,0,t.width,t.height),h=i.getImageData(0,0,r.width,r.height),g=[],c=[];for(let d=0;d<h.width;++d){c[d]=[];for(let b=0;b<h.height;++b){let x=(d+b*h.width)*4,u=[(h.data[x+0]/255-.5)*2,(h.data[x+1]/255-.5)*2,(h.data[x+2]/255-.5)*2],m=Math.sqrt(u[0]**2+u[1]**2+u[2]**2);c[d][b]=[u[0]/m,u[1]/m,u[2]/m]}}let w=d=>{let b=this.createCanvas(t.width,t.height),x=b.getContext("2d"),u=x.getImageData(0,0,b.width,b.height),m=[Math.cos(d),Math.sin(d),this.lightHeight];for(let _=0;_<h.width;++_)for(let T=0;T<h.height;++T){let j=c[_][T],P=(_+T*h.width)*4,D=[f.data[P+0]/255,f.data[P+1]/255,f.data[P+2]/255,f.data[P+3]],L=j[0]*m[0]+j[1]*m[1]+j[2]*m[2];L=Math.min(1,Math.max(this.minLightIntensity,L));let C=[L*D[0]*this.lightDiffuse[0]+this.ambientLight[0],L*D[1]*this.lightDiffuse[1]+this.ambientLight[1],L*D[2]*this.lightDiffuse[2]+this.ambientLight[2],D[3]];u.data[P+0]=Math.floor(C[0]*255),u.data[P+1]=Math.floor(C[1]*255),u.data[P+2]=Math.floor(C[2]*255),u.data[P+3]=C[3]}return x.putImageData(u,0,0),b};for(let d=0;d<e;++d){let b=Math.PI*2/e*d;g.push(w(b))}return g}createCanvas(e,t){let r=document.createElement("canvas");return r.width=e,r.height=t,r}}ne=new Property(TextureLayer,"enum","channel",{default:M,values:Object.keys(l).map(n=>l[n].id),label:"PBR Channel",exposed:!1}),te=new Property(Texture,"enum","channel",{default:M,values:Object.keys(l).map(n=>l[n].id),label:"PBR Channel",exposed:!1}),re=new Property(ModelProject,"object","pbr_materials",{default:{},exposed:!1,label:"PBR Materials"}),se=new Property(ModelProject,"object","bb_materials",{default:{},exposed:!1,label:"Project Materials"}),ie=new Property(ModelProject,"boolean","pbr_active",{default:!1,exposed:!0,values:[],label:"PBR Mode"});let le=(n,e)=>{let t=Project?Project.selected_texture:Texture.all.find(a=>a.selected);if(!t)return;let r=new v(t.layers_enabled?t.layers:Project?Project.textures:null,t.uuid).createMer(!1);r&&r.toBlob(async a=>{if(!a)return;let[s,o]=Project?[n?`${n}_mer`:`${t.name??Project.getDisplayName()}_mer`,Project.export_path]:["mer"];Blockbench.export({content:await a.arrayBuffer(),type:"PNG",name:s,extensions:["png"],resource_id:"mer",savetype:"image",startpath:o},e)})},y=n=>{if(!Project||Texture.all.length===0)return;let e=!1;Project.elements.forEach(t=>{t instanceof Cube&&Object.keys(t.faces).forEach(r=>{let s=t.faces[r].getTexture();if(!s)return;let o=Project.materials[s.uuid];o.isShaderMaterial&&!Project.bb_materials[s.uuid]&&(Project.bb_materials[s.uuid]=o);let i=new v(s.layers_enabled?s.layers.filter(f=>f.visible)??null:Project.textures,s.uuid).getMaterial(n);Project.materials[s.uuid]=THREE.ShaderMaterial.prototype.copy.call(i,o),Canvas.updateAllFaces(s),e=!0})}),Project.pbr_active=e},fe=()=>{!Project||!Project.bb_materials||(Project.elements.forEach(n=>{n instanceof Cube&&Object.keys(n.faces).forEach(e=>{let r=n.faces[e].getTexture();if(!r)return;let a=Project.bb_materials[r.uuid];a&&(Project.materials[r.uuid]=a)})}),Project.pbr_active=!1,Canvas.updateAll())},ce=(n,e)=>{let t=e??document.createElement("canvas"),r=t.getContext("2d");if(!r)return null;let a=Math.max(Project?Project.texture_width:16,16),s=Math.max(Project?Project.texture_height:16,16);return t.width=a,t.height=s,r.fillStyle=`rgb(${n.r*255}, ${n.g*255}, ${n.b*255})`,r.fillRect(0,0,a,s),t.toDataURL()},xe=(n,e=8,t=!1)=>{if(!Project)return;let r=Project.selected_texture;if(!r)return;let a=new v(r.layers_enabled?r.layers:Project.textures,r.uuid),s=a.findTexture(l.albedo),o=a.findTexture(l.normal);if(!s||!o)return;let f=new pe(n).bake(e,s.canvas,o.canvas),h=new Texture({name:`${s.name}_baked`,saved:!1,particle:!1,keep_size:!1,layers_enabled:!0}).fromDataURL(f[0].toDataURL()),g=t?c=>{let w=a.findTexture(l.emissive);if(!w)return c;let d=w.canvas;if(!d.getContext("2d"))return c;let x=Math.max(c.width,d.width,Project?Project.texture_width:16),u=Math.max(c.height,d.height,Project?Project.texture_height:16),m=document.createElement("canvas");m.width=x,m.height=u;let _=m.getContext("2d");return _?(_.drawImage(c,0,0),_.globalCompositeOperation="screen",_.drawImage(d,0,0),m):c}:c=>c;f.forEach((c,w)=>{new TextureLayer({name:`baked_${w+1}`,data_url:g(c).toDataURL()},h).addForEditing()}),h.add().select(),Blockbench.showQuickMessage("Textures baked \u{1F950}",2e3)},be=()=>{if(!Project)return;let n=Z();Project.textures.forEach(e=>{let t=new v(n,e.uuid),r=t.findTexture(l.normal,!1),a=t.findTexture(l.height,!1),s=t.findTexture(l.albedo,!1),o=t.findTexture(l.metalness,!1)?.name,i=t.findTexture(l.emissive,!1)?.name,f=t.findTexture(l.roughness,!1)?.name,h={};return s||(h.baseColor={type:"color",label:"Base Color",value:"#ff00ff"}),!o&&!i&&!f&&(h.metalness={label:"Metalness",type:"range",min:0,max:255,step:1,value:0},h.emissive={label:"Emissive",type:"range",min:0,max:255,step:1,value:0},h.roughness={label:"Roughness",type:"range",min:0,max:255,step:1,value:0}),r&&(h.depthMap={type:"checkbox",label:"Normal Map",value:"normal"}),a&&(h.depthMap={type:"checkbox",label:"Height Map",value:"heightmap"}),r&&a&&(h.depthMap={type:"radio",label:"Depth Map",options:{normal:"Normal Map",heightmap:"Height"},value:"normal"}),R=new Dialog(`${p}_texture_set`,{id:`${p}_texture_set`,title:"Create Texture Set JSON",buttons:["Create","Cancel"],form:h,onConfirm(g){let c=Project.model_identifier.length>0?Project.model_identifier:Project.getDisplayName(),w=o||i||f,d={format_version:"1.16.100","minecraft:texture_set":{color:(s?c:g.baseColor?.toHexString())??c,metalness_emissive_roughness:[g.metalness??0,g.emissive??0,g.roughness??255]}};g.depthMap==="normal"&&r||!a&&r?d["minecraft:texture_set"].normal=`${c}_normal`:(!r||g.depthMap==="heightmap")&&a&&(d["minecraft:texture_set"].heightmap=`${c}_heightmap`);let b=m=>{if(!g.depthMap)return m();let _=g.depthMap==="normal"||g.depthMap&&!a,T=_?r:a;if(!T)return m();Blockbench.export({content:T.canvas.toDataURL()??"",type:"PNG",name:`${c}_${_?"normal":"heightmap"}`,extensions:["png"],resource_id:g.depthMap,startpath:Project.export_path,savetype:"image"},j=>{d["minecraft:texture_set"][_?"normal":"heightmap"]=pathToName(j,!1),m()})},x=m=>{if(!s)return m();Blockbench.export({content:s.canvas.toDataURL(),extensions:["png"],type:"PNG",name:c,startpath:Project.export_path,savetype:"image"},_=>{d["minecraft:texture_set"].color=pathToName(_,!1),m()})},u=()=>b(()=>{x(()=>{Blockbench.export({content:JSON.stringify(d,null,2),type:"JSON",name:`${c}.texture_set`,extensions:["json"],resource_id:"texture_set",startpath:Project.export_path,savetype:"text"},()=>{Blockbench.showQuickMessage("Texture set created",2e3),R.hide()})})});if(w){le(c,m=>{d["minecraft:texture_set"].metalness_emissive_roughness=pathToName(m,!1),u()});return}u()},cancelIndex:1}),R.show(),R})},ue=["undo","redo","add_texture","finish_edit","finished_edit","load_project","select_preview_scene","change_texture_path","select_project"],de=()=>Project&&Project.pbr_active&&y(),_e=()=>{ue.forEach(n=>{Blockbench.addListener(n,de)})},he=()=>{ue.forEach(n=>{Blockbench.removeListener(n,de)})},ve=()=>{H=new BarSelect("display_settings_tone_mapping",{category:"preview",name:"Tone Mapping",description:"Changes the tone mapping of the preview",type:"select",default_value:THREE.NoToneMapping,value:Preview.selected.renderer.toneMapping??THREE.NoToneMapping,icon:"monochrome_photos",options:{[THREE.NoToneMapping]:"None",[THREE.LinearToneMapping]:"Linear",[THREE.ReinhardToneMapping]:"Reinhard",[THREE.CineonToneMapping]:"Cineon",[THREE.ACESFilmicToneMapping]:"ACES"},onChange({value:n}){let e=Number(Q.get());Preview.all.forEach(t=>{t.renderer.toneMapping=Number(n),t.renderer.toneMappingExposure=e}),Preview.selected.renderer.toneMapping=Number(n),Preview.selected.renderer.toneMappingExposure=e,Blockbench.showQuickMessage(`Tone mapping set to ${this.getNameFor(n)}`,2e3),E.value||E.set(!0),y()}}),Q=new BarSlider("display_settings_exposure",{category:"preview",name:"Exposure",description:"Adjusts the exposure of the scene",type:"number",value:1,icon:"exposure",step:.1,min:-2,max:2,onBefore(){Number(H.get())===THREE.NoToneMapping&&H.change(THREE.LinearToneMapping.toString()),E.set(!0)},onChange({value:n}){let e=Math.max(-2,Math.min(2,Number(n)));Preview.all.forEach(t=>{t.renderer.toneMappingExposure=e}),Preview.selected.renderer.toneMappingExposure=e},onAfter(){y()}}),F=new Dialog(`${p}_bake_textures`,{id:`${p}_bake_textures`,title:"Bake Textures",buttons:["Bake","Cancel"],form:{ambientLight:{type:"color",label:"Ambient Light",value:"#1f1f1f"},lightDiffuse:{type:"color",label:"Light Diffuse",value:"#ffffff"},lightHeight:{type:"range",label:"Light Height",min:0,max:1,step:.01,value:.66},minLightIntensity:{type:"range",label:"Minimum Light Intensity",min:0,max:1,step:.01,value:0},directions:{type:"number",label:"Directions",value:8,min:1,max:360,step:1},blendEmissive:{type:"checkbox",label:"Blend Emissive",value:!1}},onConfirm(n){let e=new THREE.Color(n.ambientLight.toString()),t=new THREE.Color(n.lightDiffuse.toString());xe({ambientLight:[e.r,e.g,e.b],lightDiffuse:[t.r,t.g,t.b],lightHeight:Number(n.lightHeight),minLightIntensity:Number(n.minLightIntensity)},n.directions??8,n.blendEmissive??!1)}}),O=new Action(`${p}_bake_textures`,{icon:"cake",name:"Bake Textures",description:"Bakes textures for the selected PBR material",click(){F.show()}}),$=new Action(`${p}_generate_normal`,{icon:"altitude",name:"Generate Normal Map",description:"Generates a normal map from the height map",condition:()=>(TextureLayer.selected||Texture.all.find(n=>n.selected))!==void 0,click(){let n=TextureLayer.selected??(Project&&Project.selected_texture?Project.selected_texture.selected_layer??Project.selected_texture:Texture.getDefault());if(!n)return;let e=new v(n instanceof Texture&&n.layers_enabled?n.layers:Z(),n.uuid),t=v.createNormalMap(n);if(t){e.saveTexture(l.normal,t),t.select(),Blockbench.showQuickMessage("Normal map generated",2e3);return}Blockbench.showQuickMessage("Failed to generate normal map",2e3)}}),N=new Action(`${p}_create_mer`,{icon:"lightbulb_circle",name:"Export MER",description:"Exports a texture map from the metalness, emissive, and roughness channels. (For use in Bedrock resource packs.)",condition:{formats:["bedrock_block","bedrock_entity"],project:!0},click(){le()}}),A=new Action(`${p}_decode_mer`,{icon:"arrow_split",name:"Decode MER",description:"Decodes a MER texture map into metalness, emissive, and roughness channels",condition:()=>!!Project&&Project.selected_texture!==null&&!Project.selected_texture.layers_enabled,click(){let n=TextureLayer.selected?.texture??Texture.all.find(a=>a.selected)??Texture.getDefault(),e=new v(n.layers_enabled?n.layers:[n],n.uuid),t=e.decodeMer(),r=[l.metalness,l.emissive,l.roughness];Undo.initEdit({textures:[n]}),n.activateLayers(!0),r.forEach(a=>{let s=a.id,o=t[s];if(!o){Blockbench.showStatusMessage(`Failed to decode ${a.label} channel`,3e3);return}let i=new TextureLayer({name:`${n?.name}_${s}`,data_url:o.toDataURL()},n);e.saveTexture(a,i),i.addForEditing()}),Undo.finishEdit("Decode MER")}}),I=new Action(`${p}_create_texture_set`,{name:"Create Texture Set",icon:"layers",description:"Creates a texture set JSON file. Generates a MER when metalness, emissive, or roughness channels are set.",click(){be()},condition:{formats:["bedrock_block","bedrock_entity"],project:!0}}),U=new Action(`${p}_create_material_texture`,{icon:"stacks",name:"Create Material Texture",description:"Creates a new texture for a PBR material",click(){if(!Project)return;let n=new Texture({name:"New Material",saved:!1,particle:!1,keep_size:!1,layers_enabled:!0}),e=ce(new THREE.Color(8421504));e&&(n.fromDataURL(e).add().select(),Object.keys(l).forEach(t=>{let r=l[t],a=new TextureLayer({name:r.label,visible:!0},n);a.setSize(Project.texture_width??n.width,Project.texture_height??n.height);let s=ce(r.default??new THREE.Color(0),a.canvas);s&&a.texture.fromDataURL(s),a.extend({channel:r.id}),a.addForEditing()}))}}),Object.entries(l).forEach(([n,e])=>{Y[n]=new Action(`${p}_assign_channel_${n}`,{icon:e.icon??"tv_options_edit_channels",name:`Assign to ${e.label.toLocaleLowerCase()} channel`,description:`Assign the selected layer to the ${e.label} channel`,category:"textures",condition:()=>Modes.paint&&(TextureLayer.selected||Project&&Project.selected_texture!==null),click(t){let r=TextureLayer.selected??(Project?Project.selected_texture:null);if(!r||!Project)return;Undo.initEdit({layers:[r]}),r.extend({channel:e.id});let a=r instanceof TextureLayer?r.texture:r;a.updateChangesAfterEdit(),Project.pbr_materials[a.uuid]||(Project.pbr_materials[a.uuid]={}),Object.entries(Project.pbr_materials[a.uuid]).forEach(([s,o])=>{o===r.uuid&&(delete Project.pbr_materials[a.uuid][s],r.channel=M)}),Project.pbr_materials[a.uuid][n]=r.uuid,Undo.finishEdit("Change channel assignment"),Blockbench.showQuickMessage(`Assigned "${r.name}" to ${e.label} channel`,2e3),y()}})}),S=new Action(`${p}_unassign_channel`,{icon:"cancel",name:"Unassign Channel",description:"Unassign the selected layer from the channel",category:"textures",condition:()=>{if(!Modes.paint)return!1;if(TextureLayer.selected)return TextureLayer.selected.channel!==M||!TextureLayer.selected.channel;if(!Project)return!1;let n=Project.selected_texture;return n!==null&&(n.channel!==M||!n.channel)},click(){let n=TextureLayer.selected??(Project?Project.selected_texture:null);if(!n||!Project)return;Undo.initEdit({layers:[n]});let e=n instanceof TextureLayer?n.texture:n,t=n.channel;Project.pbr_materials[e.uuid]={},n.channel=M,e.updateChangesAfterEdit(),Undo.finishEdit("Unassign channel"),Blockbench.showQuickMessage(`Unassigned "${n.name}" from ${t} channel`,2e3),y()}}),E=new Toggle("toggle_pbr",{name:"PBR Preview",description:"Toggle PBR Preview",icon:"panorama_photosphere",category:"view",default:!1,click(){},onChange(n){if(n){y(),_e(),Blockbench.showQuickMessage("PBR Preview is now enabled");return}fe(),he(),Blockbench.showQuickMessage("PBR Preview is now disabled")}}),z=new Toggle(`${p}_correct_lights`,{category:"preview",name:"Correct Lights",description:"Corrects the lighting in the preview",icon:"fluorescent",default:!1,onChange(n){Preview.all.forEach(e=>{e.renderer.physicallyCorrectLights=n}),Preview.selected.renderer.physicallyCorrectLights=n,Blockbench.showQuickMessage(`Physically corrected lighting is now ${n?"enabled":"disabled"}`,2e3),n&&E.set(!0),y()},click(){}}),J=new NumSlider("slider_brush_metalness",{category:"paint",name:"Metalness",description:"Adjust the metalness of the brush",settings:{min:0,max:1,step:.01,default:0},condition:()=>{if(!Project)return!1;let n=Project.selected_texture;return n?.layers_enabled?n.layers.find(({channel:e})=>e===l.metalness.id)!==void 0:!1}}),q=new NumSlider("slider_brush_roughness",{category:"paint",name:"Roughness",description:"Adjust the roughness of the brush",settings:{min:0,max:1,step:.01,default:1},condition:()=>{if(!Project)return!1;let n=Project.selected_texture;return n?.layers_enabled?n.layers.find(({channel:e})=>e===l.roughness.id)!==void 0:!1}}),X=new ColorPicker("brush_emissive_color",{category:"paint",name:"Emissive",description:"Adjust the emissive color of the brush",value:"#000000",condition:()=>{if(!Project)return!1;let n=Project.selected_texture;return n?.layers_enabled?n.layers.find(({channel:e})=>e===l.emissive.id)!==void 0:!1}}),K=new NumSlider("slider_brush_height",{category:"paint",name:"Height",description:"Adjust the height of the brush",settings:{min:0,max:1,step:.01,default:.5},condition:()=>{if(!Project)return!1;let n=Project.selected_texture;return n?.layers_enabled?n.layers.find(({channel:e})=>e===l.height.id)!==void 0:!1}}),V=new Tool("material_brush",{name:"Material Brush",description:"Paints across multiple texture layers",icon:"view_in_ar",paintTool:!0,cursor:"cell",condition:()=>Modes.paint&&!!Project&&Project.selected_texture&&Project.selected_texture.layers_enabled,brush:{blend_modes:!1,shapes:!0,size:!0,softness:!0,opacity:!0,offset_even_radius:!0,floor_coordinates:!0,changePixel(n,e,t,r,{size:a,softness:s,texture:o}){let i=k.fromSettings(),f=Object.keys(i.colors),h=t;return o.layers.forEach(g=>{if(!g.visible||!f.includes(g.channel))return;let c=i.getChannel(g.channel);c&&(g.ctx.fillStyle=c.getStyle(),g.ctx.fillRect(a*n,a*e,a,a),g.selected&&(h={r:c.r*255,g:c.g*255,b:c.b*255,a:r*255}))}),h}},onCanvasClick(n){Painter.startPaintToolCanvas(n,n.event)},onSelect(){y()},click(){y()}}),G=new Menu(`${p}_channel_menu`,[...Object.keys(l).map(n=>`${p}_assign_channel_${n}`),`${p}_unassign_channel`],{onOpen(){y()}}),W=new Action("pbr_channel_menu",{name:"Assign to PBR Channel",icon:"texture",click(n){G.open(n)},children:[...Object.values(Y),S]}),ae=new Action(`${p}_show_channel_menu`,{icon:"texture",name:"Assign to PBR Channel",description:"Assign the selected layer to a channel",category:"textures",condition:()=>Modes.paint&&(TextureLayer.selected||Project&&Project.selected_texture!==null),click(n){G.open(n)}}),ee=new Panel(`${p}_display_settings`,{name:"PBR Settings",id:`${p}_display_settings_panel`,icon:"display_settings",toolbars:[new Toolbar(`${p}_controls_toolbar`,{id:`${p}_controls_toolbar`,children:["toggle_pbr",`${p}_correct_lights`,`${p}_create_material_texture`,`${p}_show_channel_menu`],name:"PBR"}),new Toolbar(`${p}_display_settings_toolbar`,{id:`${p}_display_settings_toolbar`,children:["display_settings_tone_mapping","display_settings_exposure"],name:"Display Settings"})],display_condition:{modes:["edit","paint","animate"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"left",default_position:{slot:"left_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"textures",insert_before:"color"}),oe=new Panel(`${p}_material_brush_panel`,{name:"Material Brush",id:`${p}_material_brush_panel`,icon:"view_in_ar",toolbars:[new Toolbar(`${p}_material_brush_toolbar`,{id:`${p}_material_brush_toolbar`,children:["material_brush","slider_brush_metalness","slider_brush_roughness","brush_emissive_color","slider_brush_height"],name:"Material Brush"})],display_condition:{modes:["paint"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"right",default_position:{slot:"right_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"color",insert_before:"outliner"}),MenuBar.addAction(N,"file.export"),MenuBar.addAction($,"tools"),MenuBar.addAction(A,"tools"),MenuBar.addAction(I,"file.export"),MenuBar.addAction(E,"view"),MenuBar.addAction(z,"preview"),MenuBar.addAction(U,"tools"),MenuBar.addAction(O,"tools"),MenuBar.addAction(V,"tools.0"),MenuBar.addAction(W,"image.0")},Te=()=>{Object.entries(Y).forEach(([n,e])=>{e.delete()}),MenuBar.removeAction(`file.export.${p}_create_mer`),MenuBar.removeAction(`file.export.${p}_create_texture_set`),MenuBar.removeAction(`tools.${p}_generate_normal`),he(),ee?.delete(),R?.delete(),U?.delete(),N?.delete(),$?.delete(),E?.delete(),A?.delete(),O?.delete(),F?.delete(),I?.delete(),te?.delete(),ne?.delete(),ae?.delete(),Q?.delete(),H?.delete(),z?.delete(),S?.delete(),se?.delete(),re?.delete(),ie?.delete(),V?.delete(),oe?.delete(),me?.delete(),J?.delete(),q?.delete(),X?.delete(),K?.delete(),W?.delete()};BBPlugin.register(p,{version:ge,title:"PBR Features",author:"Jason J. Gardner",description:"Create RTX/Deferred Rendering textures in Blockbench. Adds support for previewing PBR materials and exporting them in Minecraft-compatible formats.",tags:["PBR","RTX","Deferred Rendering"],icon:"icon.png",variant:"both",await_loading:!0,new_repository_format:!0,repository:"https://github.com/jasonjgardner/blockbench-plugins",has_changelog:!0,min_version:"4.10.1",onload:ve,onunload:Te})})();})();
