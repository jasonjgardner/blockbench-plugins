"use strict";(()=>{var b=THREE,I=Vue,ke=Blockbench;var B="_NONE_",m={albedo:{id:"albedo",label:"Albedo",description:"The color of the material",map:"map",icon:"tonality",default:new b.Color(16777215)},metalness:{id:"metalness",label:"Metalness",description:"The material's metalness map",map:"metalnessMap",icon:"brightness_6",default:new b.Color(0)},emissive:{id:"emissive",label:"Emissive",description:"The material's emissive map",map:"emissiveMap",icon:"wb_twilight",default:new b.Color(0)},roughness:{id:"roughness",label:"Roughness",description:"The material's roughness map",map:"roughnessMap",icon:"grain",default:new b.Color(16777215)},height:{id:"height",label:"Height",description:"The material's height map",map:"bumpMap",icon:"landscape",default:new b.Color(16777215)},normal:{id:"normal",label:"Normal",description:"The material's normal map",map:"normalMap",icon:"looks",default:new b.Color("rgb(128, 128, 255)")},ao:{id:"ao",label:"Ambient Occlusion",description:"The material's ambient occlusion map",map:"aoMap",icon:"motion_mode",default:new b.Color(16777215)}},s={},y=[],E=[];y.push(()=>{s.channelProp=new Property(TextureLayer,"enum","channel",{default:B,values:Object.keys(m).map(t=>m[t].id),label:"PBR Channel",exposed:!1}),s.textureChannelProp=new Property(Texture,"enum","channel",{default:B,values:Object.keys(m).map(t=>m[t].id),label:"PBR Channel",exposed:!1}),s.pbrMaterialsProp=new Property(ModelProject,"object","pbr_materials",{default:{},exposed:!1,label:"PBR Materials"}),s.projectMaterialsProp=new Property(ModelProject,"object","bb_materials",{default:{},exposed:!1,label:"Project Materials"}),s.projectPbrModeProp=new Property(ModelProject,"boolean","pbr_active",{default:!1,exposed:!0,values:[],label:"PBR Mode"})});var be=(t=!0)=>{let a=Project?Project.textures??Texture.all:Texture.all;return t?a.filter(e=>e.layers_enabled&&e.layers.length>0).flatMap(e=>e.layers):a},k=class t{constructor(a,e){this._scope=a??be(),this._materialUuid=e}merToCanvas(){let a=this.getTexture(m.emissive),e=this.getTexture(m.roughness),r=this.getTexture(m.metalness);if(!a&&!e&&!r){let{metalness:n,emissive:o,roughness:l}=this.decodeMer();n&&(r=t.makePixelatedCanvas(n)),o&&(a=t.makePixelatedCanvas(o)),l&&(e=t.makePixelatedCanvas(l))}return{emissiveMap:a,roughnessMap:e,metalnessMap:r}}getMaterial(a={}){let{emissiveMap:e,roughnessMap:r,metalnessMap:n}=this.merToCanvas(),o=this.getTexture(m.normal);return new b.MeshStandardMaterial({map:this.getTexture(m.albedo)??t.makePixelatedCanvas(TextureLayer.selected?.canvas??Texture.all.find(l=>l.selected)?.canvas??Texture.getDefault().canvas),aoMap:this.getTexture(m.ao),bumpMap:this.getTexture(m.height),normalMap:o,normalScale:new b.Vector2(1,1),metalnessMap:n,metalness:n?1:0,roughnessMap:r,roughness:1,emissiveMap:e,emissiveIntensity:e?1:0,emissive:e?16777215:0,envMap:PreviewScene.active?.cubemap??null,envMapIntensity:.95,alphaTest:.5,...a})}saveTexture(a,e){Project&&(Project.pbr_materials||(Project.pbr_materials={}),Project.pbr_materials[this._materialUuid]||(Project.pbr_materials[this._materialUuid]={}),Project.pbr_materials[this._materialUuid][a.id]=e.uuid,e.extend({channel:a.id}))}findTexture(a,e=!0){if(!Project)return null;let r=this._scope.find(i=>i.channel&&(i.channel===a||i.channel===a.id));if(r)return r;let n=typeof a=="string"?a:a.id;Project.pbr_materials??={};let o=Project.pbr_materials[this._materialUuid];if(!o&&e&&n!==B){let i=new RegExp(`_*${n}(.[^.]+)?$`,"i");return this._scope.find(g=>i.test(g.name))??null}let l=o?.[n];return l?this._scope.find(i=>i.uuid===l)??null:null}static makePixelatedCanvas(a){let e=new b.CanvasTexture(a,void 0,void 0,void 0,b.NearestFilter,b.NearestFilter);return e.needsUpdate=!0,e}getTexture(a){let e=this.findTexture(a);return e?t.makePixelatedCanvas(e.canvas):null}static extractChannel(a,e){let r=a.canvas,n=r.width,o=r.height,l=r.getContext("2d");if(!l||!n||!o)return null;let i=document.createElement("canvas");i.width=n,i.height=o;let g=i.getContext("2d");if(!g)return null;let f={r:0,g:1,b:2,a:3}[e],{data:p}=l.getImageData(0,0,n,o),u=new Uint8ClampedArray(n*o*4);for(let x=0;x<p.length;x+=4)u[x]=p[x+f],u[x+1]=p[x+f],u[x+2]=p[x+f],u[x+3]=255;let v=new ImageData(u,n,o);return g.putImageData(v,0,0),i}decodeMer(a=1){let e=this.findTexture("mer",!0);if(!e)return{metalness:null,emissive:null,emissiveLevel:null,roughness:null,sss:null};let r=t.extractChannel(e,"r"),n=t.extractChannel(e,"g"),o=t.extractChannel(e,"b"),l=t.extractChannel(e,"a"),i=document.createElement("canvas");i.width=e.img.width??16,i.height=e.img.height??16;let g=this.findTexture(m.albedo);g&&(i.width=g.img.width??16,i.height=g.img.height??16);let f=i.getContext("2d"),p=n?.getContext("2d"),u=g?.canvas?.getContext("2d");if(!f||!u||!p)return{metalness:r,emissive:n,roughness:o,sss:l};let v=u.getImageData(0,0,i.width,i.height),x=p.getImageData(0,0,i.width,i.height),_=new Uint8ClampedArray(i.width*i.height*4);for(let d=0;d<v.data.length;d+=4){if(x.data[d]>a){_[d]=v.data[d],_[d+1]=v.data[d+1],_[d+2]=v.data[d+2],_[d+3]=255;continue}_[d]=0,_[d+1]=0,_[d+2]=0,_[d+3]=255}return f.putImageData(new ImageData(_,i.width,i.height),0,0),{metalness:r,emissive:i,emissiveLevel:n,roughness:o,sss:l}}createMer(a=!1){let e=this.findTexture(m.metalness,a),r=this.findTexture(m.emissive,a),n=this.findTexture(m.roughness,a),o=this.findTexture("sss",!1),l=Math.max(e?.img.width??0,r?.img.width??0,n?.img.width??0,Project?Project.texture_width:0,16),i=Math.max(e?.img.height??0,r?.img.height??0,n?.img.height??0,Project?Project.texture_height:0,16),g=document.createElement("canvas");g.width=l,g.height=i;let f=g.getContext("2d");if(!f)return null;let p=e?.img?t.extractChannel(e,"r"):null,u=r?.img?t.extractChannel(r,"g"):null,v=n?.img?t.extractChannel(n,"b"):null,x=o&&o?.img?t.extractChannel(o,"a"):null,_=p?.getContext("2d")?.getImageData(0,0,l,i)??new ImageData(l,i),d=u?.getContext("2d")?.getImageData(0,0,l,i)??new ImageData(l,i),c=v?.getContext("2d")?.getImageData(0,0,l,i)??new ImageData(l,i),h=x?.getContext("2d")?.getImageData(0,0,l,i)??new ImageData(new Uint8ClampedArray(l*i*4).fill(255),l,i),w=new Uint8ClampedArray(l*i*4);for(let C=0;C<w.length;C+=4)w[C]=_.data[C],w[C+1]=d.data[C],w[C+2]=c.data[C],w[C+3]=h.data[C];return f.putImageData(new ImageData(w,l,i),0,0),g}createLabPbrOutput(a=!0){let e=this.findTexture(m.metalness,a),r=this.findTexture(m.emissive,a),n=this.findTexture(m.roughness,a),o=this.findTexture(m.normal,a),l=this.findTexture(m.height,a),i=this.findTexture(m.ao,!1),g=this.findTexture("sss",!0),f=this.findTexture("porosity",!0),p=Math.max(e?.img.width??0,r?.img.width??0,n?.img.width??0,Project?Project.texture_width:0,16),u=Math.max(e?.img.height??0,r?.img.height??0,n?.img.height??0,Project?Project.texture_height:0,16),v=document.createElement("canvas");v.width=p,v.height=u;let x=v.getContext("2d"),_=document.createElement("canvas");_.width=p,_.height=u;let d=_.getContext("2d");if(!x||!d)return null;let c=new Uint8ClampedArray(p*u*4),h=new Uint8ClampedArray(p*u*4),w=e?.canvas,C=r?.canvas,D=n?.canvas,P=g?.canvas,L=f?.canvas,T=w?.getContext("2d"),j=C?.getContext("2d"),N=D?.getContext("2d"),te=P?.getContext("2d"),ae=L?.getContext("2d"),re=T?.getImageData(0,0,p,u),A=j?.getImageData(0,0,p,u),z=N?.getImageData(0,0,p,u),ne=te?.getImageData(0,0,p,u),se=ae?.getImageData(0,0,p,u);for(let M=0;M<c.length;M+=4){let Q=z?1-Math.sqrt(z.data[M]/255):0,pe=Math.min(229,Math.max(0,Math.round((re?.data[M]??Q)*229))),ge=se?.data[M],fe=ne?.data[M];if(c[M]=Q*255,c[M+1]=pe,c[M+2]=fe??ge??0,!A){c[M+3]=255;continue}let xe=Math.round((A?.data[M]+A?.data[M+1]+A?.data[M+2])/3);c[M+3]=xe||255}x.putImageData(new ImageData(c,p,u),0,0);let oe=o?.canvas,ie=i?.canvas,le=l?.canvas,ce=oe?.getContext("2d"),ue=ie?.getContext("2d"),me=le?.getContext("2d"),G=ce?.getImageData(0,0,p,u),de=ue?.getImageData(0,0,p,u),he=me?.getImageData(0,0,p,u);for(let M=0;M<h.length;M+=4)h[M]=G?.data[M]??0,h[M+1]=G?.data[M+1]??0,h[M+2]=de?.data[M+2]??255,h[M+3]=he?.data[M+3]||255;return d.putImageData(new ImageData(h,p,u),0,0),{specular:v,normalMap:_}}decodeLabPbrNormal(a){let e=a.img.width??16,r=a.img.height??16,n=a.canvas.getContext("2d");if(!n)return{};let o=document.createElement("canvas");o.width=e,o.height=r;let l=document.createElement("canvas");l.width=e,l.height=r;let i=document.createElement("canvas");i.width=e,i.height=r;let g=o.getContext("2d"),f=l.getContext("2d"),p=i.getContext("2d"),{data:u}=n.getImageData(0,0,e,r);if(!u||!g||!f||!p)return{};let v=new Uint8ClampedArray(e*r*4),x=new Uint8ClampedArray(e*r*4),_=new Uint8ClampedArray(e*r*4);for(let d=0;d<u.length;d+=4){let c=d+1,h=d+2,w=d+3;v[d]=u[h],v[c]=u[h],v[h]=u[h],v[w]=255,x[d]=u[d],x[c]=u[c],x[h]=255,x[w]=255,_[d]=u[w],_[c]=u[w],_[h]=u[w],_[w]=255}return g.putImageData(new ImageData(v,e,r),0,0),f.putImageData(new ImageData(x,e,r),0,0),p.putImageData(new ImageData(_,e,r),0,0),{ao:o,normal:l,heightmap:i}}decodeLabPbrSpecular(a){let e=a.img.width??16,r=a.img.height??16,n=a.canvas.getContext("2d");if(!n)return{};let o=document.createElement("canvas");o.width=e,o.height=r;let l=document.createElement("canvas");l.width=e,l.height=r;let i=document.createElement("canvas");i.width=e,i.height=r;let g=document.createElement("canvas");g.width=e,g.height=r;let f=document.createElement("canvas");f.width=e,f.height=r;let p=o.getContext("2d"),u=l.getContext("2d"),v=i.getContext("2d"),x=g.getContext("2d"),_=f.getContext("2d"),{data:d}=n.getImageData(0,0,e,r);if(!d||!p||!u||!v||!x||!_)return{};let c=new Uint8ClampedArray(e*r*4),h=new Uint8ClampedArray(e*r*4),w=new Uint8ClampedArray(e*r*4),C=new Uint8ClampedArray(e*r*4),D=new Uint8ClampedArray(e*r*4);for(let P=0;P<d.length;P+=4){let L=P+1,T=P+2,j=P+3;w[P]=255-d[P],w[L]=255-d[P],w[T]=255-d[P],w[j]=255,c[P]=d[L],c[L]=d[L],c[T]=d[L],c[j]=255,h[P]=d[j],h[L]=d[j],h[T]=d[j],h[j]=255,C[P]=0,C[L]=0,C[T]=0,C[j]=255,D[P]=d[T],D[L]=d[T],D[T]=d[T],D[j]=255,d[T]<65&&(C[P]=d[T],C[L]=d[T],C[T]=d[T],C[j]=255,D[P]=0,D[L]=0,D[T]=0,D[j]=255)}return p.putImageData(new ImageData(c,e,r),0,0),u.putImageData(new ImageData(h,e,r),0,0),v.putImageData(new ImageData(w,e,r),0,0),x.putImageData(new ImageData(C,e,r),0,0),_.putImageData(new ImageData(D,e,r),0,0),{metalness:o,emissive:l,roughness:i,sss:g,porosity:f}}createTexturesFromSpecular(a){let e=this.decodeLabPbrSpecular(a);return Object.entries(e).forEach(([r,n])=>{n&&new Texture({name:`${a.name}_${r}`,saved:!1,particle:!1,keep_size:!1}).fromDataURL(n.toDataURL()).add()}),e}createTexturesFromNormal(a){let e=this.decodeLabPbrNormal(a);return Object.entries(e).forEach(([r,n])=>{n&&new Texture({name:`${a.name}_${r}`,saved:!1,particle:!1,keep_size:!1}).fromDataURL(n.toDataURL()).add()}),e}createNormalMap(a,e=!1){let r=a.canvas.getContext("2d");if(!r)return null;let n=Math.max(a.img.width??a.canvas.width,Project?Project.texture_width:0,16),o=Math.max(a.img.height??a.canvas.height,Project?Project.texture_height:0,16),{data:l}=r.getImageData(0,0,n,o),i=document.createElement("canvas"),g=i.getContext("2d");if(!g)return null;let f=(c,h)=>{let w=(c+h*n)*4;return l[w]/255};i.width=n,i.height=o,g.drawImage(a.img,0,0,n,o);let p=g.getImageData(0,0,n,o),u=p.data,v=c=>{let h=Math.sqrt(c[0]*c[0]+c[1]*c[1]+c[2]*c[2]);return[c[0]/h,c[1]/h,c[2]/h]};for(let c=0;c<o;c++)for(let h=0;h<n;h++){let w=f(Math.max(h-1,0),c),C=f(Math.min(h+1,n-1),c),D=f(h,Math.max(c-1,0)),P=f(h,Math.min(c+1,o-1)),L=C-w,T=P-D,j=v([-L,-T,1]),N=(c*n+h)*4;u[N]=(j[0]+1)/2*255,u[N+1]=(j[1]+1)/2*255,u[N+2]=(j[2]+1)/2*255,u[N+3]=e?f(h,c)*255:255}g.putImageData(p,0,0);let x=i.toDataURL(),_=`${a.name.replace(/_height(map)?/i,"")}_normal`;if(a instanceof TextureLayer){let c=new TextureLayer({name:_,data_url:x,visible:!0},a.texture);return c.addForEditing(),c}let d=new Texture({name:_,saved:!1,particle:!1,keep_size:!1}).fromDataURL(x);return Project&&d.add(),d}};var H=class{constructor({lightHeight:a=.66,ambientLight:e=[.1,.1,.1],minLightIntensity:r=0,lightDiffuse:n=[1,1,1]}={}){this.lightHeight=a,this.ambientLight=e,this.minLightIntensity=r,this.lightDiffuse=n}bake(a,e,r){let n=e instanceof HTMLCanvasElement?e:this.createCanvas(e.width,e.height),o=r instanceof HTMLCanvasElement?r:this.createCanvas(r.width,r.height),l=n.getContext("2d"),i=o.getContext("2d");l.drawImage(e,0,0),i.drawImage(r,0,0);let g=l.getImageData(0,0,e.width,e.height),f=i.getImageData(0,0,r.width,r.height),p=[],u=[];for(let x=0;x<f.width;++x){u[x]=[];for(let _=0;_<f.height;++_){let d=(x+_*f.width)*4,c=[(f.data[d+0]/255-.5)*2,(f.data[d+1]/255-.5)*2,(f.data[d+2]/255-.5)*2],h=Math.sqrt(c[0]**2+c[1]**2+c[2]**2);u[x][_]=[c[0]/h,c[1]/h,c[2]/h]}}let v=x=>{let _=this.createCanvas(e.width,e.height),d=_.getContext("2d"),c=d.getImageData(0,0,_.width,_.height),h=[Math.cos(x),Math.sin(x),this.lightHeight];for(let w=0;w<f.width;++w)for(let C=0;C<f.height;++C){let D=u[w][C],P=(w+C*f.width)*4,L=[g.data[P+0]/255,g.data[P+1]/255,g.data[P+2]/255,g.data[P+3]],T=D[0]*h[0]+D[1]*h[1]+D[2]*h[2];T=Math.min(1,Math.max(this.minLightIntensity,T));let j=[T*L[0]*this.lightDiffuse[0]+this.ambientLight[0],T*L[1]*this.lightDiffuse[1]+this.ambientLight[1],T*L[2]*this.lightDiffuse[2]+this.ambientLight[2],L[3]];c.data[P+0]=Math.floor(j[0]*255),c.data[P+1]=Math.floor(j[1]*255),c.data[P+2]=Math.floor(j[2]*255),c.data[P+3]=j[3]}return d.putImageData(c,0,0),_};for(let x=0;x<a;++x){let _=Math.PI*2/a*x;p.push(v(_))}return p}createCanvas(a,e){let r=document.createElement("canvas");return r.width=a,r.height=e,r}};var V=(t,a=8,e=!1)=>{if(!Project)return;let r=Project.selected_texture??Texture.getDefault(),n=new k(r.layers_enabled?r.layers:Project.textures,r.uuid),o=n.findTexture(m.albedo);if(!o){Blockbench.showStatusMessage("Can not bake without a base color assigned.",3e3);return}let l=n.findTexture(m.normal);if(!l){Blockbench.showStatusMessage("Can not bake without a normal map assigned.",3e3);return}let g=new H(t).bake(a,o.canvas,l.canvas),f=new Texture({name:`${o.name}_baked`,saved:!1,particle:!1,keep_size:!1,layers_enabled:!0}).fromDataURL(g[0].toDataURL()),p=e?u=>{let v=n.findTexture(m.emissive);if(!v)return u;let x=v.canvas;if(!x.getContext("2d"))return u;let d=Math.max(u.width,x.width,Project?Project.texture_width:16),c=Math.max(u.height,x.height,Project?Project.texture_height:16),h=document.createElement("canvas");h.width=d,h.height=c;let w=h.getContext("2d");return w?(w.drawImage(u,0,0),w.globalCompositeOperation="screen",w.drawImage(x,0,0),h):u}:u=>u;g.forEach((u,v)=>{new TextureLayer({name:`baked_${v+1}`,data_url:p(u).toDataURL()},f).addForEditing()}),f.add().select(),Blockbench.showQuickMessage("Textures baked \u{1F950}",2e3)};y.push(()=>{s.bakeTexturesDialog=new Dialog("bake_textures",{id:"bake_textures",title:"Bake Textures",buttons:["Bake","Cancel"],form:{ambientLight:{type:"color",label:"Ambient Light",value:"#1f1f1f"},lightDiffuse:{type:"color",label:"Light Diffuse",value:"#ffffff"},lightHeight:{type:"range",label:"Light Height",min:0,max:1,step:.01,value:.66},minLightIntensity:{type:"range",label:"Minimum Light Intensity",min:0,max:1,step:.01,value:0},directions:{type:"number",label:"Directions",value:8,min:1,max:360,step:1},blendEmissive:{type:"checkbox",label:"Blend Emissive",value:!1}},onConfirm(t){let a=new b.Color(t.ambientLight.toString()),e=new b.Color(t.lightDiffuse.toString());V({ambientLight:[a.r,a.g,a.b],lightDiffuse:[e.r,e.g,e.b],lightHeight:Number(t.lightHeight),minLightIntensity:Number(t.minLightIntensity)},t.directions??8,t.blendEmissive??!1)}}),s.bakeTexturesAction=new Action("bake_textures",{icon:"cake",name:"Bake Textures",description:"Bakes textures for the selected PBR material",click(){s.bakeTexturesDialog?.show()}}),MenuBar.addAction(s.bakeTexturesAction,"tools")});E.push(()=>{MenuBar.removeAction("tools.bake_textures")});var S=t=>{if(!Project||Texture.all.length===0)return;let a=!1;Project.elements.forEach(e=>{e instanceof Cube&&Object.keys(e.faces).forEach(r=>{let o=e.faces[r].getTexture();if(!o)return;let l=Project.materials[o.uuid];l.isShaderMaterial&&!Project.bb_materials[o.uuid]&&(Project.bb_materials[o.uuid]=l);let i=new k(o.layers_enabled?o.layers.filter(g=>g.visible)??null:Project.textures,o.uuid).getMaterial(t);Project.materials[o.uuid]=b.ShaderMaterial.prototype.copy.call(i,l),Canvas.updateAllFaces(o),a=!0})}),Project.pbr_active=a};var $={},J=Condition(()=>Modes.paint&&(TextureLayer.selected||Project&&Project.selected_texture!==null));function _e(){Object.entries(m).forEach(([t,a])=>{$[t]=new Action(`assign_channel_${t}`,{icon:a.icon??"tv_options_edit_channels",name:`Assign to ${a.label.toLocaleLowerCase()} channel`,description:`Assign the selected layer to the ${a.label} channel`,category:"textures",condition:J,click(e){let r=TextureLayer.selected??(Project?Project.selected_texture:null);if(!r||!Project)return;Undo.initEdit({layers:[r]}),r.extend({channel:a.id});let n=r instanceof TextureLayer?r.texture:r;n.updateChangesAfterEdit(),Project.pbr_materials[n.uuid]||(Project.pbr_materials[n.uuid]={}),Object.entries(Project.pbr_materials[n.uuid]).forEach(([o,l])=>{l===r.uuid&&(delete Project.pbr_materials[n.uuid][o],r.channel=B)}),Project.pbr_materials[n.uuid][t]=r.uuid,Undo.finishEdit("Change channel assignment"),Blockbench.showQuickMessage(`Assigned "${r.name}" to ${a.label} channel`,2e3),S()}})})}function ve(){Object.entries($).forEach(([t,a])=>{a.delete()})}y.push(_e);E.push(ve);y.push(()=>{s.unassignChannel=new Action("unassign_channel",{icon:"cancel",name:"Unassign Channel",description:"Unassign the selected layer from the channel",category:"textures",condition:()=>{if(!Modes.paint)return!1;if(TextureLayer.selected)return TextureLayer.selected.channel!==B||!TextureLayer.selected.channel;if(!Project)return!1;let t=Project.selected_texture;return t!==null&&t.channel!==B&&t.channel},click(){let t=TextureLayer.selected??(Project?Project.selected_texture:null);if(!t||!Project)return;Undo.initEdit({layers:[t]});let a=t instanceof TextureLayer?t.texture:t,e=t.channel;Project.pbr_materials[a.uuid]={},t.channel=B,a.updateChangesAfterEdit(),Undo.finishEdit("Unassign channel"),Blockbench.showQuickMessage(`Unassigned "${t.name}" from ${e} channel`,2e3),S()}}),s.channelMenu=new Menu("channel_menu",[...Object.keys(m).map(t=>`assign_channel_${t}`),"unassign_channel"],{onOpen(){S()}}),s.openChannelMenu=new Action("pbr_channel_menu",{name:"Assign to PBR Channel",icon:"texture",click(t){s.channelMenu?.open(t)},children:[...Object.values($),s.unassignChannel]}),s.showChannelMenu=new Action("show_channel_menu",{icon:"texture",name:"Assign to PBR Channel",description:"Assign the selected layer to a channel",category:"textures",condition:J,click(t){s.channelMenu?.open(t)}})});y.push(()=>{s.openChannelMenu&&MenuBar.addAction(s.openChannelMenu,"image.0")});E.push(()=>{MenuBar.removeAction("image.pbr_channel_menu")});y.push(()=>{s.generateNormal=new Action("generate_normal",{icon:"altitude",name:"Generate Normal Map",description:"Generates a normal map from the height map",condition:()=>(TextureLayer.selected||Texture.all.find(t=>t.selected))!==void 0,click(){let t=TextureLayer.selected??(Project&&Project.selected_texture?Project.selected_texture.selected_layer??Project.selected_texture:Texture.getDefault());if(!t)return;let a=new k(t instanceof Texture&&t.layers_enabled?t.layers:null,t.uuid),e=a.createNormalMap(t);if(e){a.saveTexture(m.normal,e),e.select(),Blockbench.showQuickMessage("Normal map generated",2e3);return}Blockbench.showQuickMessage("Failed to generate normal map",2e3)}}),MenuBar.addAction(s.generateNormal,"tools")});E.push(()=>{MenuBar.removeAction("tools.generate_normal")});var W=(t,a)=>{let e=a??document.createElement("canvas"),r=e.getContext("2d");if(!r)return null;let n=Math.max(Project?Project.texture_width:16,16),o=Math.max(Project?Project.texture_height:16,16);return e.width=n,e.height=o,r.fillStyle=`rgb(${t.r*255}, ${t.g*255}, ${t.b*255})`,r.fillRect(0,0,n,o),e.toDataURL()};y.push(()=>{s.createMaterialTexture=new Action("create_material_texture",{icon:"stacks",name:"Create Material Texture",description:"Creates a new texture for a PBR material",click(){if(!Project)return;let t=new Texture({name:"New Material",saved:!1,particle:!1,keep_size:!1,layers_enabled:!0}),a=W(new b.Color(8421504));a&&(t.fromDataURL(a).add().select(),Object.keys(m).forEach(e=>{let r=m[e],n=new TextureLayer({name:r.label,visible:!0},t);n.setSize(Project.texture_width??t.width,Project.texture_height??t.height);let o=W(r.default??new b.Color(0),n.canvas);o&&n.texture.fromDataURL(o),n.extend({channel:r.id}),n.addForEditing()}))}}),MenuBar.addAction(s.createMaterialTexture,"tools")});E.push(()=>{MenuBar.removeAction("tools.create_material_texture")});var R=(t,a)=>{let e=Project?Project.selected_texture:Texture.all.find(n=>n.selected);if(!e)return;let r=new k(e.layers_enabled?e.layers:Project?Project.textures:null,e.uuid).createMer(!1);r&&r.toBlob(async n=>{if(!n)return;let[o,l]=Project?[t?`${t}_mer`:`${e.name??Project.getDisplayName()}_mer`,Project.export_path]:["mer"];Blockbench.export({content:await n.arrayBuffer(),type:"PNG",name:o,extensions:["png"],resource_id:"mer",savetype:"image",startpath:l},a)})};function we(){s.generateMer=new Action("create_mer",{icon:"lightbulb_circle",name:"Export MER",description:"Exports a texture map from the metalness, emissive, and roughness channels. (For use in Bedrock resource packs.)",condition:{formats:["bedrock_block","bedrock_entity"],project:!0},click(){R()}}),s.decodeMer=new Action("decode_mer",{icon:"arrow_split",name:"Decode MER",description:"Decodes a MER texture map into metalness, emissive, and roughness channels",condition:()=>!!Project&&Project.selected_texture!==null&&!Project.selected_texture.layers_enabled,click(){let t=TextureLayer.selected?.texture??Texture.all.find(n=>n.selected)??Texture.getDefault(),a=new k(t.layers_enabled?t.layers:[t],t.uuid),e=a.decodeMer(),r=[m.metalness,m.emissive,m.roughness];Undo.initEdit({textures:[t]}),t.activateLayers(!0),r.forEach(n=>{let o=n.id,l=e[o];if(!l){Blockbench.showStatusMessage(`Failed to decode ${n.label} channel`,3e3);return}let i=new TextureLayer({name:`${t?.name}_${o}`,data_url:l.toDataURL()},t);a.saveTexture(n,i),i.addForEditing()}),Undo.finishEdit("Decode MER")}}),MenuBar.addAction(s.decodeMer,"tools"),MenuBar.addAction(s.generateMer,"file.export")}function ye(){MenuBar.removeAction("file.export.create_mer"),MenuBar.removeAction("tools.decode_mer")}y.push(we);E.push(ye);var Ce=()=>{Project&&Project.textures.forEach(t=>{let a=new k(null,t.uuid),e=a.findTexture(m.normal,!1),r=a.findTexture(m.height,!1),n=a.findTexture(m.albedo,!1),o=a.findTexture(m.metalness,!1)?.name,l=a.findTexture(m.emissive,!1)?.name,i=a.findTexture(m.roughness,!1)?.name,g={};return n||(g.baseColor={type:"color",label:"Base Color",value:"#ff00ff"}),!o&&!l&&!i&&(g.metalness={label:"Metalness",type:"range",min:0,max:255,step:1,value:0},g.emissive={label:"Emissive",type:"range",min:0,max:255,step:1,value:0},g.roughness={label:"Roughness",type:"range",min:0,max:255,step:1,value:0}),e&&(g.depthMap={type:"checkbox",label:"Normal Map",value:"normal"}),r&&(g.depthMap={type:"checkbox",label:"Height Map",value:"heightmap"}),e&&r&&(g.depthMap={type:"radio",label:"Depth Map",options:{normal:"Normal Map",heightmap:"Height"},value:"normal"}),s.textureSetDialog=new Dialog("texture_set",{id:"texture_set",title:"Create Texture Set JSON",buttons:["Create","Cancel"],form:g,onConfirm(f){let p=Project.model_identifier.length>0?Project.model_identifier:Project.getDisplayName(),u=o||l||i,v={format_version:"1.16.100","minecraft:texture_set":{color:(n?p:f.baseColor?.toHexString())??p,metalness_emissive_roughness:[f.metalness??0,f.emissive??0,f.roughness??255]}};f.depthMap==="normal"&&e||!r&&e?v["minecraft:texture_set"].normal=`${p}_normal`:(!e||f.depthMap==="heightmap")&&r&&(v["minecraft:texture_set"].heightmap=`${p}_heightmap`);let x=c=>{if(!f.depthMap)return c();let h=f.depthMap==="normal"||f.depthMap&&!r,w=h?e:r;if(!w)return c();Blockbench.export({content:w.canvas.toDataURL()??"",type:"PNG",name:`${p}_${h?"normal":"heightmap"}`,extensions:["png"],resource_id:f.depthMap,startpath:Project.export_path,savetype:"image"},C=>{v["minecraft:texture_set"][h?"normal":"heightmap"]=pathToName(C,!1),c()})},_=c=>{if(!n)return c();Blockbench.export({content:n.canvas.toDataURL(),extensions:["png"],type:"PNG",name:p,startpath:Project.export_path,savetype:"image"},h=>{v["minecraft:texture_set"].color=pathToName(h,!1),c()})},d=()=>x(()=>{_(()=>{Blockbench.export({content:JSON.stringify(v,null,2),type:"JSON",name:`${p}.texture_set`,extensions:["json"],resource_id:"texture_set",startpath:Project.export_path,savetype:"text"},()=>{Blockbench.showQuickMessage("Texture set created",2e3),s.textureSetDialog?.hide()})})});if(u){R(p,c=>{v["minecraft:texture_set"].metalness_emissive_roughness=pathToName(c,!1),d()});return}d()},cancelIndex:1}),s.textureSetDialog.show()})};y.push(()=>{s.createTextureSet=new Action("create_texture_set",{name:"Create Texture Set",icon:"layers",description:"Creates a texture set JSON file. Generates a MER when metalness, emissive, or roughness channels are set.",click(){Ce()},condition:{formats:["bedrock_block","bedrock_entity"],project:!0}}),MenuBar.addAction(s.createTextureSet,"file.export")});E.push(()=>{MenuBar.removeAction("file.export.create_texture_set")});y.push(()=>{s.toggleCorrectLights=new Toggle("correct_lights",{category:"preview",name:"Correct Lights",description:"Corrects the lighting in the preview",icon:"fluorescent",default:!1,onChange(t){Preview.all.forEach(a=>{a.renderer.physicallyCorrectLights=t}),Preview.selected.renderer.physicallyCorrectLights=t,Blockbench.showQuickMessage(`Physically corrected lighting is now ${t?"enabled":"disabled"}`,2e3),t&&s.togglePbr?.set(!0),S()},click(){}}),MenuBar.addAction(s.toggleCorrectLights,"preview")});E.push(()=>{MenuBar.removeAction("preview.correct_lights")});var q=()=>{!Project||!Project.bb_materials||(Project.elements.forEach(t=>{t instanceof Cube&&Object.keys(t.faces).forEach(a=>{let r=t.faces[a].getTexture();if(!r)return;let n=Project.bb_materials[r.uuid];n&&(Project.materials[r.uuid]=n)})}),Project.pbr_active=!1,Canvas.updateAll())};var X=["undo","redo","add_texture","finish_edit","finished_edit","load_project","select_preview_scene","change_texture_path","select_project"],K=()=>Project&&Project.pbr_active&&S(),Pe=()=>{X.forEach(t=>{Blockbench.addListener(t,K)})},Y=()=>{X.forEach(t=>{Blockbench.removeListener(t,K)})};y.push(()=>{s.togglePbr=new Toggle("toggle_pbr",{name:"PBR Preview",description:"Toggle PBR Preview",icon:"panorama_photosphere",category:"view",default:!1,click(){},onChange(t){if(t){S(),Pe(),Blockbench.showQuickMessage("PBR Preview is now enabled");return}q(),Y(),Blockbench.showQuickMessage("PBR Preview is now disabled")}}),MenuBar.addAction(s.togglePbr,"view")});E.push(()=>{Y(),MenuBar.removeAction("view.toggle_pbr")});var Z=t=>{let a=Math.max(-2,Math.min(2,Number(t)));Preview.all.forEach(e=>{e.renderer.toneMappingExposure=a}),Preview.selected.renderer.toneMappingExposure=a};y.push(()=>{s.exposureSlider=new BarSlider("display_settings_exposure",{category:"preview",name:"Exposure",description:"Adjusts the exposure of the scene",type:"number",value:1,icon:"exposure",step:.1,min:-2,max:2,onBefore(){Number(s.tonemappingSelect?.get())===b.NoToneMapping&&s.tonemappingSelect.change(b.LinearToneMapping.toString()),s.togglePbr?.set(!0)},onChange({value:t}){Z(t)},onAfter(){S()}}),s.resetExposureButton=new Action("display_settings_reset_exposure",{category:"preview",name:"Reset Exposure",description:"Resets the exposure of the scene",icon:"exposure_plus_1",condition:()=>s.exposureSlider!==void 0&&Number(s.exposureSlider?.get())!==1,click(){Z(1),s.exposureSlider?.set(1),S()}}),s.tonemappingSelect=new BarSelect("display_settings_tone_mapping",{category:"preview",name:"Tone Mapping",description:"Changes the tone mapping of the preview",type:"select",default_value:b.NoToneMapping,value:Preview.selected.renderer.toneMapping??b.NoToneMapping,icon:"monochrome_photos",options:{[b.NoToneMapping]:"No Tone Mapping",[b.LinearToneMapping]:"Linear",[b.ReinhardToneMapping]:"Reinhard",[b.CineonToneMapping]:"Cineon",[b.ACESFilmicToneMapping]:"ACES"},onChange({value:t}){let a=Number(s.exposureSlider?.get()??1);Preview.all.forEach(e=>{e.renderer.toneMapping=Number(t),e.renderer.toneMappingExposure=a}),Preview.selected.renderer.toneMapping=Number(t),Preview.selected.renderer.toneMappingExposure=a,Blockbench.showQuickMessage(`Tone mapping set to ${this.getNameFor(t)}`,2e3),s.togglePbr&&!s.togglePbr.value&&s.togglePbr.set(!0),S()}})});var Me=(t,a="texture")=>{t.toBlob(async e=>{e&&Blockbench.export({content:await e.arrayBuffer(),type:"PNG",name:`${a}_n`,extensions:["png"],resource_id:"normal_map",savetype:"image"})})},Te=(t,a="texture")=>{t.toBlob(async e=>{e&&Blockbench.export({content:await e.arrayBuffer(),type:"PNG",name:`${a}_s`,extensions:["png"],resource_id:"specular_map",savetype:"image"})})};y.push(()=>{s.generateLabPbr=new Action("generate_lab_pbr",{icon:"experiment",name:"Generate labPBR textures",description:"Generate a specular and normal map in labPBR format for Java shaders",condition:{formats:["java_block"],project:!0},async click(){let t=Project.selected_texture;if(!t)return;let e=new k(t.layers_enabled?t.layers:[t],t.uuid).createLabPbrOutput();if(e===null)return;let r=t.name??(Project?Project.getDisplayName():"texture");await Promise.all([Me(e.normalMap,pathToName(r)),Te(e.specular,pathToName(r))]),Blockbench.showQuickMessage("Exported labPBR textures")}}),s.decodeLabPbr=new Action("decode_lab_pbr",{icon:"frame_source",name:"Decode labPBR textures",description:"Decodes the selected texture into a specular or normal map in labPBR format",condition:()=>!!Project&&Project.selected_texture!==null,click(){let t=TextureLayer.selected?.texture??Texture.all.find(e=>e.selected)??Texture.getDefault(),a=new k(t.layers_enabled?t.layers:[t],t.uuid);if(t.name.endsWith("_n")||t.name.endsWith("_n.png")){a.createTexturesFromNormal(t);return}if(t.name.endsWith("_s")||t.name.endsWith("_s.png")){a.createTexturesFromSpecular(t);return}Blockbench.showQuickMessage("Failed to decode labPBR texture")}}),MenuBar.addAction(s.generateLabPbr,"file.export"),MenuBar.addAction(s.decodeLabPbr,"tools")});E.push(()=>{MenuBar.removeAction("file.export.generate_lab_pbr")});var U=class t{constructor({colors:a}){this._colors={...Object.fromEntries(Object.keys(m).map(e=>[e,m[e].default??new b.Color(4294967040)])),...a}}get colors(){return this._colors}set colors(a){this._colors={...this._colors,...a}}toString(){let a=Object.entries(this._colors).map(([e,r])=>[e,r.getHexString()]);return JSON.stringify(a)}getChannel(a){return this._colors[a]}static makeLinearColor(a){let e=Math.min(1,Math.max(0,a));return new b.Color(e,e,e).convertSRGBToLinear()}static fromSettings(){let a="#000000",e=Number(s.brushMetalnessSlider?.get()),r=Number(s.brushRoughnessSlider?.get()??1),n=(s.brushEmissiveColor?.get()??a).toString(),o=Number(s.brushHeightSlider?.get()),l=ColorPanel.get(),i={[m.albedo.id]:new b.Color(l),[m.metalness.id]:t.makeLinearColor(e),[m.roughness.id]:t.makeLinearColor(r),[m.emissive.id]:new b.Color(n??a),[m.height.id]:t.makeLinearColor(o),[m.normal.id]:m.normal.default??new b.Color("#8080ff")};return new t({colors:i})}};var Ee=t=>{let a=new b.WebGLRenderer({alpha:!0,antialias:!0}),e=new b.Scene,r=new b.PerspectiveCamera(75,96/96,.1,1e3),n=new b.AmbientLight(16777215,.75);e.add(n);let o=new b.PointLight(16777215,1,100);o.position.set(5,5,5),e.add(o);let l=new b.SphereGeometry(1,32,32),i=new b.MeshStandardMaterial({color:t.albedo,metalness:t.metalness??0,roughness:t.roughness??1,emissive:t.emissive,bumpScale:t.height??0,envMap:PreviewScene.active?.cubemap??null,envMapIntensity:.5}),g=new b.Mesh(l,i);return e.add(g),r.position.x=0,r.position.y=0,r.position.z=2,a.setSize(96,96),a.render(e,r),a.domElement.toDataURL()},ee="materialBrushPresets",O=()=>JSON.parse(localStorage.getItem(ee)||"{}"),je=(t,a)=>{let e=O(),r=a??guid(),n=s.userMaterialBrushPresets?.getFormResult()??{},o={};return n.albedo&&(o.albedo=n.albedo.toString()),n.metalness&&(o.metalness=Number(n.metalness)),n.roughness&&(o.roughness=Number(n.roughness)),n.emissive&&(o.emissive=n.emissive.toString()),n.height&&(o.height=Number(n.height)),e[r]=[o,t??"New Preset",Ee(o)],localStorage.setItem(ee,JSON.stringify(e)),r},F=({metalness:t,roughness:a,emissive:e,height:r,albedo:n})=>{t!==void 0&&s.brushMetalnessSlider?.setValue(t||0,!0),a!==void 0&&s.brushRoughnessSlider?.setValue(a??1,!0),e!==void 0&&s.brushEmissiveColor?.set(e??"#000000"),r!==void 0&&s.brushHeightSlider?.setValue(Math.max(0,Math.min(1,r??.5)),!0),n!==void 0&&ColorPanel.set(n)},Le=I.extend({name:"UserPresetsDialog",data(){return{userPresets:{},channels:m}},methods:{applyPreset(t){try{let[a,e]=this.userPresets[t],{metalness:r,roughness:n,emissive:o,height:l,albedo:i}=a;F({metalness:Number(r),roughness:Number(n),emissive:o.toString(),height:Number(l),albedo:i.toString()}),s.userMaterialBrushPresets?.hide(),Blockbench.showQuickMessage(`Preset "${e}" applied`,2e3)}catch{Blockbench.showQuickMessage("Failed to apply preset",2e3)}},deletePreset(t){Blockbench.showMessageBox({title:"Delete Preset",message:"Are you sure you want to delete this preset?",confirm:1,cancel:0,buttons:["Cancel","Delete"],checkboxes:{},width:400},a=>{if(a){let e=O(),r=this.userPresets[t][1]??t;delete e[t],localStorage.setItem("materialBrushPresets",JSON.stringify(e)),this.userPresets=e,Blockbench.showQuickMessage(`Preset "${r}" deleted`,2e3)}})},editPreset(t){s.userMaterialBrushPresets?.setFormValues({name:this.userPresets[t][1]??t,...this.userPresets[t][0]})},getSummary(t){return Object.entries(t).filter(([a])=>a in this.channels).map(([a,e])=>a==="albedo"||a==="emissive"?`${this.channels[a]?.label??a}: ${e}`:`${this.channels[a]?.label??a}: ${Number(e).toFixed(1)}`).join(`
`)}},computed:{presets(){return Object.entries(this.userPresets)}},mounted(){this.userPresets=O()},template:`
    <div>
      <ul class="list mobile_scrollbar preset_list">
        <li
          v-for="([key, [settings, name, image]]) in presets"
          :key="key"
          class="user_preset"
        >
          <div v-if="image" class="preset_preview" @click="editPreset(key)">
            <img :src="image" :alt="name" :title="getSummary(settings)" width="96" height="96" />
            <div class="preset_title">{{ name }}</div>
          </div>
          <div v-else>
            <div class="preset_title" @click="editPreset(key)" :title="getSummary(settings)">{{ name }}</div>
          </div>
          <div class="preset_buttons">
            <button class="delete_preset" type="button" @click="deletePreset(key)">
              <i class="material-icons">close</i>
            </button>
          </div>
        </li>
      </ul>
    </div>`});y.push(()=>{s.materialBrushStyles=Blockbench.addCSS(`
  .preset_list {
    display: grid;
    grid-template-columns: repeat(auto-fill, 96px);
    grid-gap: 8px;
    justify-content: start;
    align-items: start;
    margin: 0 auto;
    padding: 8px;
  }

  .user_preset {
    display: flex;
    justify-content: start;
    align-items: center;
    width: 100%;
    padding: 8px;
    position: relative;
  }

  .preset_title {
    font-size: 1em;
    color: var(--color-text);
  }

  .user_preset:hover .preset_title {
    color: var(--color-accent);
  }

  .preset_preview {
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
    justify-content: center;
    align-items: center;
    text-align: center;
  }

  .preset_buttons {
    display: flex;
    flex-direction: row;
    align-items: center;
    font-size: 0.8em;
    padding: 0 4px;
  }

  .preset_channel {
    display: flex;
    flex-direction: row;
    align-items: center;
    margin: 0 8px;
    font-size: 0.8em;
  }

  .delete_preset {
    margin-left: 8px;
    padding: 4px;
    height: 24px;
    width: 24px;
    min-width: 24px;
    background-color: transparent;
    color: var(--color-text);
    border: none;
    border-radius: 100%;
    position: absolute;
    right: -8px;
    top: 0;
    filter: drop-shadow(0 0 2px var(--color-shadow));
  }

  .delete_preset .material-icons {
    font-size: 0.825em;
  }

  .delete_preset:hover {
    background: transparent;
    color: var(--color-accent);
  }

  .delete_preset:hover .material-icons {
    color: var(--color-accent);
  }
  `),s.brushMetalnessSlider=new NumSlider("slider_brush_metalness",{category:"paint",name:"Metalness",description:"Adjust the metalness of the brush",settings:{min:0,max:1,step:.01,default:0},condition:()=>{if(!Project)return!1;let t=Project.selected_texture;return t?.layers_enabled?t.layers.find(({channel:a})=>a===m.metalness.id)!==void 0:!1}}),s.brushRoughnessSlider=new NumSlider("slider_brush_roughness",{category:"paint",name:"Roughness",description:"Adjust the roughness of the brush",settings:{min:0,max:1,step:.01,default:1},condition:()=>{if(!Project)return!1;let t=Project.selected_texture;return t?.layers_enabled?t.layers.find(({channel:a})=>a===m.roughness.id)!==void 0:!1}}),s.brushEmissiveColor=new ColorPicker("brush_emissive_color",{category:"paint",name:"Emissive",description:"Adjust the emissive color of the brush",value:"#000000",condition:()=>{if(!Project)return!1;let t=Project.selected_texture;return t?.layers_enabled?t.layers.find(({channel:a})=>a===m.emissive.id)!==void 0:!1}}),s.brushHeightSlider=new NumSlider("slider_brush_height",{category:"paint",name:"Height",description:"Adjust the height of the brush",settings:{min:0,max:1,step:.01,default:.5},condition:()=>{if(!Project)return!1;let t=Project.selected_texture;return t?.layers_enabled?t.layers.find(({channel:a})=>a===m.height.id)!==void 0:!1}}),s.materialBrushPresets=new BarSelect("brush_presets",{category:"paint",name:"Material Brush Presets",description:"Select a preset for the material brush",options:{matte:"Matte",gloss:"Gloss",metal:"Dull Metal",polished:"Polished Metal",glowing:"Glowing"},onChange({value:t}){F(t),s.materialBrushTool?.select(),S()}}),s.materialBrushTool=new Tool("material_brush",{name:"Material Brush",description:"Paints across multiple texture layers",icon:"view_in_ar",paintTool:!0,cursor:"cell",condition:()=>Modes.paint&&!!Project&&Project.selected_texture&&Project.selected_texture.layers_enabled,brush:{blend_modes:!1,shapes:!0,size:!0,softness:!0,opacity:!0,offset_even_radius:!0,floor_coordinates:!0,changePixel(t,a,e,r,{size:n,softness:o,texture:l}){let i=U.fromSettings(),g=Object.keys(i.colors),f=e;return l.layers.forEach(p=>{if(!p.visible||!g.includes(p.channel))return;let u=i.getChannel(p.channel);u&&(p.ctx.fillStyle=u.getStyle(),p.ctx.fillRect(n*t,n*a,n,n),p.selected&&(f={r:u.r*255,g:u.g*255,b:u.b*255,a:r*255}))}),f}},onCanvasClick(t){Painter.startPaintToolCanvas(t,t.event)},onSelect(){S()},click(){S()}}),s.loadBrushPreset=new Action("load_brush_preset",{icon:"stroke_full",name:"Material Brush Presets",description:"Load or save a brush preset",category:"paint",condition:()=>!!Project,click(){s.userMaterialBrushPresets=new Dialog("user_brush_presets",{id:"user_brush_presets",title:"Edit Material Brush",component:Le,part_order:["lines","component","form"],form:{albedo:{type:"color",label:"Albedo",value:ColorPanel.get(),toggle_enabled:!0},metalness:{type:"number",label:"Metalness",min:0,max:1,step:.01,full_width:!1,toggle_enabled:!0},roughness:{type:"number",label:"Roughness",min:0,max:1,step:.01,toggle_enabled:!0,full_width:!1},emissive:{type:"color",label:"Emissive",value:"#000000",toggle_enabled:!0},height:{type:"number",label:"Height",min:0,max:1,step:.01,toggle_enabled:!0}},onConfirm(t){F({metalness:Number(t.metalness??s.brushMetalnessSlider?.get()),roughness:Number(t.roughness??s.brushRoughnessSlider?.get()),emissive:(t.emissive??s.brushEmissiveColor?.get()).toString(),height:Number(t.height??s.brushHeightSlider?.get()),albedo:(t.albedo??ColorPanel.get()).toString()})},buttons:["Close","Save","Apply"],cancelIndex:0,confirmIndex:2,onButton(t,a){t===1&&Blockbench.textPrompt("Save Preset","New Preset",e=>{e&&(je(e),Blockbench.showQuickMessage(`Preset "${e}" saved`,2e3))})}}).show()}}),MenuBar.addAction(s.materialBrushTool,"tools.0")});E.push(()=>{MenuBar.removeAction("tools.material_brush")});y.push(()=>{s.materialBrushPanel=new Panel("material_brush_panel",{name:"Material Brush",id:"material_brush_panel",icon:"view_in_ar",toolbars:[new Toolbar("material_brush_toolbar",{id:"material_brush_toolbar",children:["material_brush","slider_brush_metalness","slider_brush_roughness","brush_emissive_color","slider_brush_height"],name:"Material Brush"}),new Toolbar("material_brush_presets_toolbar",{id:"material_brush_presets_toolbar",children:["load_brush_preset","brush_presets"],name:"Brush Presets",label:!0})],display_condition:{modes:["paint"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"right",default_position:{slot:"right_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"color",insert_before:"outliner"})});y.push(()=>{s.displaySettingsPanel=new Panel("display_settings",{name:"PBR Display Settings",id:"display_settings_panel",icon:"display_settings",toolbars:[new Toolbar("controls_toolbar",{id:"controls_toolbar",children:["toggle_pbr","correct_lights","display_settings_tone_mapping","display_settings_exposure","display_settings_reset_exposure"],name:"Display Settings"})],display_condition:{modes:["edit","paint","animate"],project:!0},component:{},expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"left",default_position:{slot:"left_bar",float_position:[0,0],float_size:[400,300],height:300,folded:!1},insert_after:"textures",insert_before:"color"})});y.push(()=>{let t=I.extend({name:"ChannelsPanel",data(){return{channels:m}},methods:{openMenu(a){s.channelMenu?.open(a)},canShowChannel(a){return a.channel&&a.channel!==B},selectedTexture(){return(Texture.selected??TextureLayer.selected.texture)!==void 0}},computed:{textures:()=>Texture.selected&&Texture.selected.layers_enabled?Texture.selected.layers:Texture.all.map(a=>a.layers_enabled?a.layers:[a]).flat()},template:`
      <div>
        <ul v-if="selectedTexture" class="list mobile_scrollbar" id="pbr_channel_list">
          <li
            v-for="texture in textures"
            v-bind:texid="texture.uuid"
            v-on:click.stop="texture.select($event)"
            v-on:dblclick="openMenu($event)"
            v-if="canShowChannel(texture)"
            :key="texture.uuid"
            class="texture"
          >
            <img :src="texture.img.src" :alt="texture.name" width="48" height="48" />
            <div class="texture_description_wrapper texture_channel_description">
              <div class="texture_name">
                <div>{{ texture.name }}</div>
                <div v-if="texture && texture.texture" class="texture_parent">
                  {{ texture.texture.name }}
                </div>
              </div>
              <div class="texture_channel_wrapper">
                <div class="texture_channel">{{ channels[texture.channel].label }}</div>
                <i class="material-icons texture_particle_icon">{{ channels[texture.channel].icon }}</i>
              </div>
            </div>
          </li>
        </ul>
      </div>`});s.channelsPanelStyle=Blockbench.addCSS(`
    .texture_channel {
      color: var(--color-text);
      flex: 1;
      font-size: 1em;
      margin: 0 0 0 auto;
      padding: 0 8px;
      text-align: right;
    }

    .texture_channel + .texture_particle_icon {
      padding-right: 8px;
    }

    .texture_channel_description {
      background-color: var(--color-back);
      display: flex;
      flex-direction: row;
      flex-wrap: nowrap;
      justify-content: space-between;
    }
    
    .texture_channel_wrapper {
      align-items: center;
      background-color: var(--color-ui);
      border-left: 1px solid var(--color-border);
      display: flex;
      flex: 1;
      flex-direction: row;
      align-items: center;
      flex-wrap: nowrap;
      padding: 0 8px;
    }

    .texture_channel_wrapper:hover {
      background-color: var(--color-button);
    }

    .texture_channel_description .texture_name {
      flex-direction: column;
      flex-wrap: nowrap;
      color: var(--color-subtle_text);
      display: flex;
      flex: 1;
      justify-content: center;
      align-items: start;
    }

    .texture_parent {
      color: var(--color-subtle_text);
      font-size: 0.8em;
    }

    .texture_channel_description:hover .texture_channel {
      color: var(--color-accent);
    }

    #pbr_channel_list {
      display: flex;
      flex-direction: column;
    }

    #pbr_channel_list .texture {
      border-top: 1px solid var(--color-border);
      padding-right: 0;
    }
  `),s.channelsPanel=new Panel("channels_panel",{name:"PBR Channels",id:"channels_panel",icon:"tv",display_condition:{modes:["paint","edit","animate"],project:!0},toolbars:[new Toolbar("channel_assignment_toolbar",{id:"channel_assignment_toolbar",children:["create_material_texture","show_channel_menu"],name:"PBR Channel Controls"})],component:t,expand_button:!0,growable:!1,onFold(){},onResize(){},default_side:"left",default_position:{slot:"left_bar",float_position:[0,0],float_size:[400,300],height:336,folded:!0},insert_after:"layers",insert_before:"color"})});(()=>{let t=()=>{y.forEach(e=>e())},a=()=>{E.forEach(e=>e()),Object.entries(s).forEach(([e,r])=>{try{r?.delete()}catch(n){console.error(`Failed to delete ${e} action:`,n)}})};BBPlugin.register("pbr_preview",{version:"1.1.0",title:"PBR Features",author:"Jason J. Gardner",description:"Create RTX/Deferred Rendering textures in Blockbench. Adds support for previewing PBR materials and exporting them in Minecraft-compatible formats.",tags:["PBR","RTX","Deferred Rendering"],icon:"icon.png",variant:"both",await_loading:!0,new_repository_format:!0,repository:"https://github.com/jasonjgardner/blockbench-plugins",has_changelog:!0,min_version:"4.10.2",onload:t,onunload:a})})();})();
